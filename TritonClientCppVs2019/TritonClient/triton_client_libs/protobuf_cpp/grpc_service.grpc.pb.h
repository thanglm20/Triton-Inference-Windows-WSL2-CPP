// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_service.proto
// Original file comments:
// Copyright 2020-2023, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#ifndef GRPC_grpc_5fservice_2eproto__INCLUDED
#define GRPC_grpc_5fservice_2eproto__INCLUDED

#include "grpc_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace inference {

// @@
// @@.. cpp:var:: service InferenceService
// @@
// @@   Inference Server GRPC endpoints.
// @@
class GRPCInferenceService final {
 public:
  static constexpr char const* service_full_name() {
    return "inference.GRPCInferenceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // @@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
    // @@       (ServerLiveResponse)
    // @@
    // @@     Check liveness of the inference server.
    // @@
    virtual ::grpc::Status ServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::inference::ServerLiveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerLiveResponse>> AsyncServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerLiveResponse>>(AsyncServerLiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerLiveResponse>> PrepareAsyncServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerLiveResponse>>(PrepareAsyncServerLiveRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
    // @@       (ServerReadyResponse)
    // @@
    // @@     Check readiness of the inference server.
    // @@
    virtual ::grpc::Status ServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::inference::ServerReadyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerReadyResponse>> AsyncServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerReadyResponse>>(AsyncServerReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerReadyResponse>> PrepareAsyncServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerReadyResponse>>(PrepareAsyncServerReadyRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
    // @@       (ModelReadyResponse)
    // @@
    // @@     Check readiness of a model in the inference server.
    // @@
    virtual ::grpc::Status ModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::inference::ModelReadyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelReadyResponse>> AsyncModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelReadyResponse>>(AsyncModelReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelReadyResponse>> PrepareAsyncModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelReadyResponse>>(PrepareAsyncModelReadyRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
    // @@       (ServerMetadataResponse)
    // @@
    // @@     Get server metadata.
    // @@
    virtual ::grpc::Status ServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::inference::ServerMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerMetadataResponse>> AsyncServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerMetadataResponse>>(AsyncServerMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerMetadataResponse>> PrepareAsyncServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerMetadataResponse>>(PrepareAsyncServerMetadataRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
    // @@       (ModelMetadataResponse)
    // @@
    // @@     Get model metadata.
    // @@
    virtual ::grpc::Status ModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::inference::ModelMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelMetadataResponse>> AsyncModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelMetadataResponse>>(AsyncModelMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelMetadataResponse>> PrepareAsyncModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelMetadataResponse>>(PrepareAsyncModelMetadataRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
    // @@       (ModelInferResponse)
    // @@
    // @@     Perform inference using a specific model.
    // @@
    virtual ::grpc::Status ModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::inference::ModelInferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelInferResponse>> AsyncModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelInferResponse>>(AsyncModelInferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelInferResponse>> PrepareAsyncModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelInferResponse>>(PrepareAsyncModelInferRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
    // @@       (stream ModelStreamInferResponse)
    // @@
    // @@     Perform streaming inference.
    // @@
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>> ModelStreamInfer(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>>(ModelStreamInferRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>> AsyncModelStreamInfer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>>(AsyncModelStreamInferRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>> PrepareAsyncModelStreamInfer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>>(PrepareAsyncModelStreamInferRaw(context, cq));
    }
    // @@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
    // @@       (ModelConfigResponse)
    // @@
    // @@     Get model configuration.
    // @@
    virtual ::grpc::Status ModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::inference::ModelConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelConfigResponse>> AsyncModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelConfigResponse>>(AsyncModelConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelConfigResponse>> PrepareAsyncModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelConfigResponse>>(PrepareAsyncModelConfigRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc ModelStatistics(
    // @@                     ModelStatisticsRequest)
    // @@                   returns (ModelStatisticsResponse)
    // @@
    // @@     Get the cumulative inference statistics for a model.
    // @@
    virtual ::grpc::Status ModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::inference::ModelStatisticsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelStatisticsResponse>> AsyncModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelStatisticsResponse>>(AsyncModelStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelStatisticsResponse>> PrepareAsyncModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelStatisticsResponse>>(PrepareAsyncModelStatisticsRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
    // @@       (RepositoryIndexResponse)
    // @@
    // @@     Get the index of model repository contents.
    // @@
    virtual ::grpc::Status RepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::inference::RepositoryIndexResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryIndexResponse>> AsyncRepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryIndexResponse>>(AsyncRepositoryIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryIndexResponse>> PrepareAsyncRepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryIndexResponse>>(PrepareAsyncRepositoryIndexRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
    // @@       (RepositoryModelLoadResponse)
    // @@
    // @@     Load or reload a model from a repository.
    // @@
    virtual ::grpc::Status RepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::inference::RepositoryModelLoadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelLoadResponse>> AsyncRepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelLoadResponse>>(AsyncRepositoryModelLoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelLoadResponse>> PrepareAsyncRepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelLoadResponse>>(PrepareAsyncRepositoryModelLoadRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
    // @@       returns (RepositoryModelUnloadResponse)
    // @@
    // @@     Unload a model.
    // @@
    virtual ::grpc::Status RepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::inference::RepositoryModelUnloadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelUnloadResponse>> AsyncRepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelUnloadResponse>>(AsyncRepositoryModelUnloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelUnloadResponse>> PrepareAsyncRepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelUnloadResponse>>(PrepareAsyncRepositoryModelUnloadRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc SystemSharedMemoryStatus(
    // @@                     SystemSharedMemoryStatusRequest)
    // @@                   returns (SystemSharedMemoryStatusRespose)
    // @@
    // @@     Get the status of all registered system-shared-memory regions.
    // @@
    virtual ::grpc::Status SystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::inference::SystemSharedMemoryStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryStatusResponse>> AsyncSystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryStatusResponse>>(AsyncSystemSharedMemoryStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryStatusResponse>> PrepareAsyncSystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryStatusResponse>>(PrepareAsyncSystemSharedMemoryStatusRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc SystemSharedMemoryRegister(
    // @@                     SystemSharedMemoryRegisterRequest)
    // @@                   returns (SystemSharedMemoryRegisterResponse)
    // @@
    // @@     Register a system-shared-memory region.
    // @@
    virtual ::grpc::Status SystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::inference::SystemSharedMemoryRegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryRegisterResponse>> AsyncSystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryRegisterResponse>>(AsyncSystemSharedMemoryRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryRegisterResponse>> PrepareAsyncSystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryRegisterResponse>>(PrepareAsyncSystemSharedMemoryRegisterRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
    // @@                     SystemSharedMemoryUnregisterRequest)
    // @@                   returns (SystemSharedMemoryUnregisterResponse)
    // @@
    // @@     Unregister a system-shared-memory region.
    // @@
    virtual ::grpc::Status SystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::inference::SystemSharedMemoryUnregisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryUnregisterResponse>> AsyncSystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryUnregisterResponse>>(AsyncSystemSharedMemoryUnregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryUnregisterResponse>> PrepareAsyncSystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryUnregisterResponse>>(PrepareAsyncSystemSharedMemoryUnregisterRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc CudaSharedMemoryStatus(
    // @@                     CudaSharedMemoryStatusRequest)
    // @@                   returns (CudaSharedMemoryStatusRespose)
    // @@
    // @@     Get the status of all registered CUDA-shared-memory regions.
    // @@
    virtual ::grpc::Status CudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::inference::CudaSharedMemoryStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryStatusResponse>> AsyncCudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryStatusResponse>>(AsyncCudaSharedMemoryStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryStatusResponse>> PrepareAsyncCudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryStatusResponse>>(PrepareAsyncCudaSharedMemoryStatusRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc CudaSharedMemoryRegister(
    // @@                     CudaSharedMemoryRegisterRequest)
    // @@                   returns (CudaSharedMemoryRegisterResponse)
    // @@
    // @@     Register a CUDA-shared-memory region.
    // @@
    virtual ::grpc::Status CudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::inference::CudaSharedMemoryRegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryRegisterResponse>> AsyncCudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryRegisterResponse>>(AsyncCudaSharedMemoryRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryRegisterResponse>> PrepareAsyncCudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryRegisterResponse>>(PrepareAsyncCudaSharedMemoryRegisterRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
    // @@                     CudaSharedMemoryUnregisterRequest)
    // @@                   returns (CudaSharedMemoryUnregisterResponse)
    // @@
    // @@     Unregister a CUDA-shared-memory region.
    // @@
    virtual ::grpc::Status CudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::inference::CudaSharedMemoryUnregisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryUnregisterResponse>> AsyncCudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryUnregisterResponse>>(AsyncCudaSharedMemoryUnregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryUnregisterResponse>> PrepareAsyncCudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryUnregisterResponse>>(PrepareAsyncCudaSharedMemoryUnregisterRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
    // @@                   returns (TraceSettingResponse)
    // @@
    // @@     Update and get the trace setting of the Triton server.
    // @@
    virtual ::grpc::Status TraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::inference::TraceSettingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::TraceSettingResponse>> AsyncTraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::TraceSettingResponse>>(AsyncTraceSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::TraceSettingResponse>> PrepareAsyncTraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::TraceSettingResponse>>(PrepareAsyncTraceSettingRaw(context, request, cq));
    }
    // @@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
    // @@                   returns (LogSettingsResponse)
    // @@
    // @@     Update and get the log settings of the Triton server.
    // @@
    virtual ::grpc::Status LogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::inference::LogSettingsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::LogSettingsResponse>> AsyncLogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::LogSettingsResponse>>(AsyncLogSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::LogSettingsResponse>> PrepareAsyncLogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inference::LogSettingsResponse>>(PrepareAsyncLogSettingsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // @@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
      // @@       (ServerLiveResponse)
      // @@
      // @@     Check liveness of the inference server.
      // @@
      virtual void ServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest* request, ::inference::ServerLiveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest* request, ::inference::ServerLiveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
      // @@       (ServerReadyResponse)
      // @@
      // @@     Check readiness of the inference server.
      // @@
      virtual void ServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest* request, ::inference::ServerReadyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest* request, ::inference::ServerReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
      // @@       (ModelReadyResponse)
      // @@
      // @@     Check readiness of a model in the inference server.
      // @@
      virtual void ModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest* request, ::inference::ModelReadyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest* request, ::inference::ModelReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
      // @@       (ServerMetadataResponse)
      // @@
      // @@     Get server metadata.
      // @@
      virtual void ServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest* request, ::inference::ServerMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest* request, ::inference::ServerMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
      // @@       (ModelMetadataResponse)
      // @@
      // @@     Get model metadata.
      // @@
      virtual void ModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest* request, ::inference::ModelMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest* request, ::inference::ModelMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
      // @@       (ModelInferResponse)
      // @@
      // @@     Perform inference using a specific model.
      // @@
      virtual void ModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest* request, ::inference::ModelInferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest* request, ::inference::ModelInferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
      // @@       (stream ModelStreamInferResponse)
      // @@
      // @@     Perform streaming inference.
      // @@
      virtual void ModelStreamInfer(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::inference::ModelInferRequest,::inference::ModelStreamInferResponse>* reactor) = 0;
      // @@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
      // @@       (ModelConfigResponse)
      // @@
      // @@     Get model configuration.
      // @@
      virtual void ModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest* request, ::inference::ModelConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest* request, ::inference::ModelConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc ModelStatistics(
      // @@                     ModelStatisticsRequest)
      // @@                   returns (ModelStatisticsResponse)
      // @@
      // @@     Get the cumulative inference statistics for a model.
      // @@
      virtual void ModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest* request, ::inference::ModelStatisticsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest* request, ::inference::ModelStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
      // @@       (RepositoryIndexResponse)
      // @@
      // @@     Get the index of model repository contents.
      // @@
      virtual void RepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest* request, ::inference::RepositoryIndexResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest* request, ::inference::RepositoryIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
      // @@       (RepositoryModelLoadResponse)
      // @@
      // @@     Load or reload a model from a repository.
      // @@
      virtual void RepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest* request, ::inference::RepositoryModelLoadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest* request, ::inference::RepositoryModelLoadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
      // @@       returns (RepositoryModelUnloadResponse)
      // @@
      // @@     Unload a model.
      // @@
      virtual void RepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest* request, ::inference::RepositoryModelUnloadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest* request, ::inference::RepositoryModelUnloadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc SystemSharedMemoryStatus(
      // @@                     SystemSharedMemoryStatusRequest)
      // @@                   returns (SystemSharedMemoryStatusRespose)
      // @@
      // @@     Get the status of all registered system-shared-memory regions.
      // @@
      virtual void SystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest* request, ::inference::SystemSharedMemoryStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest* request, ::inference::SystemSharedMemoryStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc SystemSharedMemoryRegister(
      // @@                     SystemSharedMemoryRegisterRequest)
      // @@                   returns (SystemSharedMemoryRegisterResponse)
      // @@
      // @@     Register a system-shared-memory region.
      // @@
      virtual void SystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest* request, ::inference::SystemSharedMemoryRegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest* request, ::inference::SystemSharedMemoryRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
      // @@                     SystemSharedMemoryUnregisterRequest)
      // @@                   returns (SystemSharedMemoryUnregisterResponse)
      // @@
      // @@     Unregister a system-shared-memory region.
      // @@
      virtual void SystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest* request, ::inference::SystemSharedMemoryUnregisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest* request, ::inference::SystemSharedMemoryUnregisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc CudaSharedMemoryStatus(
      // @@                     CudaSharedMemoryStatusRequest)
      // @@                   returns (CudaSharedMemoryStatusRespose)
      // @@
      // @@     Get the status of all registered CUDA-shared-memory regions.
      // @@
      virtual void CudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest* request, ::inference::CudaSharedMemoryStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest* request, ::inference::CudaSharedMemoryStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc CudaSharedMemoryRegister(
      // @@                     CudaSharedMemoryRegisterRequest)
      // @@                   returns (CudaSharedMemoryRegisterResponse)
      // @@
      // @@     Register a CUDA-shared-memory region.
      // @@
      virtual void CudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest* request, ::inference::CudaSharedMemoryRegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest* request, ::inference::CudaSharedMemoryRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
      // @@                     CudaSharedMemoryUnregisterRequest)
      // @@                   returns (CudaSharedMemoryUnregisterResponse)
      // @@
      // @@     Unregister a CUDA-shared-memory region.
      // @@
      virtual void CudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest* request, ::inference::CudaSharedMemoryUnregisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest* request, ::inference::CudaSharedMemoryUnregisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
      // @@                   returns (TraceSettingResponse)
      // @@
      // @@     Update and get the trace setting of the Triton server.
      // @@
      virtual void TraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest* request, ::inference::TraceSettingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest* request, ::inference::TraceSettingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
      // @@                   returns (LogSettingsResponse)
      // @@
      // @@     Update and get the log settings of the Triton server.
      // @@
      virtual void LogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest* request, ::inference::LogSettingsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest* request, ::inference::LogSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerLiveResponse>* AsyncServerLiveRaw(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerLiveResponse>* PrepareAsyncServerLiveRaw(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerReadyResponse>* AsyncServerReadyRaw(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerReadyResponse>* PrepareAsyncServerReadyRaw(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelReadyResponse>* AsyncModelReadyRaw(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelReadyResponse>* PrepareAsyncModelReadyRaw(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerMetadataResponse>* AsyncServerMetadataRaw(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ServerMetadataResponse>* PrepareAsyncServerMetadataRaw(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelMetadataResponse>* AsyncModelMetadataRaw(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelMetadataResponse>* PrepareAsyncModelMetadataRaw(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelInferResponse>* AsyncModelInferRaw(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelInferResponse>* PrepareAsyncModelInferRaw(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* ModelStreamInferRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* AsyncModelStreamInferRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* PrepareAsyncModelStreamInferRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelConfigResponse>* AsyncModelConfigRaw(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelConfigResponse>* PrepareAsyncModelConfigRaw(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelStatisticsResponse>* AsyncModelStatisticsRaw(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::ModelStatisticsResponse>* PrepareAsyncModelStatisticsRaw(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryIndexResponse>* AsyncRepositoryIndexRaw(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryIndexResponse>* PrepareAsyncRepositoryIndexRaw(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelLoadResponse>* AsyncRepositoryModelLoadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelLoadResponse>* PrepareAsyncRepositoryModelLoadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelUnloadResponse>* AsyncRepositoryModelUnloadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::RepositoryModelUnloadResponse>* PrepareAsyncRepositoryModelUnloadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryStatusResponse>* AsyncSystemSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryStatusResponse>* PrepareAsyncSystemSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryRegisterResponse>* AsyncSystemSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryRegisterResponse>* PrepareAsyncSystemSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryUnregisterResponse>* AsyncSystemSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::SystemSharedMemoryUnregisterResponse>* PrepareAsyncSystemSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryStatusResponse>* AsyncCudaSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryStatusResponse>* PrepareAsyncCudaSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryRegisterResponse>* AsyncCudaSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryRegisterResponse>* PrepareAsyncCudaSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryUnregisterResponse>* AsyncCudaSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::CudaSharedMemoryUnregisterResponse>* PrepareAsyncCudaSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::TraceSettingResponse>* AsyncTraceSettingRaw(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::TraceSettingResponse>* PrepareAsyncTraceSettingRaw(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::LogSettingsResponse>* AsyncLogSettingsRaw(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inference::LogSettingsResponse>* PrepareAsyncLogSettingsRaw(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::inference::ServerLiveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerLiveResponse>> AsyncServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerLiveResponse>>(AsyncServerLiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerLiveResponse>> PrepareAsyncServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerLiveResponse>>(PrepareAsyncServerLiveRaw(context, request, cq));
    }
    ::grpc::Status ServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::inference::ServerReadyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerReadyResponse>> AsyncServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerReadyResponse>>(AsyncServerReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerReadyResponse>> PrepareAsyncServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerReadyResponse>>(PrepareAsyncServerReadyRaw(context, request, cq));
    }
    ::grpc::Status ModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::inference::ModelReadyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelReadyResponse>> AsyncModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelReadyResponse>>(AsyncModelReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelReadyResponse>> PrepareAsyncModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelReadyResponse>>(PrepareAsyncModelReadyRaw(context, request, cq));
    }
    ::grpc::Status ServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::inference::ServerMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerMetadataResponse>> AsyncServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerMetadataResponse>>(AsyncServerMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerMetadataResponse>> PrepareAsyncServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ServerMetadataResponse>>(PrepareAsyncServerMetadataRaw(context, request, cq));
    }
    ::grpc::Status ModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::inference::ModelMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelMetadataResponse>> AsyncModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelMetadataResponse>>(AsyncModelMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelMetadataResponse>> PrepareAsyncModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelMetadataResponse>>(PrepareAsyncModelMetadataRaw(context, request, cq));
    }
    ::grpc::Status ModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::inference::ModelInferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelInferResponse>> AsyncModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelInferResponse>>(AsyncModelInferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelInferResponse>> PrepareAsyncModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelInferResponse>>(PrepareAsyncModelInferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>> ModelStreamInfer(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>>(ModelStreamInferRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>> AsyncModelStreamInfer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>>(AsyncModelStreamInferRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>> PrepareAsyncModelStreamInfer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>>(PrepareAsyncModelStreamInferRaw(context, cq));
    }
    ::grpc::Status ModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::inference::ModelConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelConfigResponse>> AsyncModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelConfigResponse>>(AsyncModelConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelConfigResponse>> PrepareAsyncModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelConfigResponse>>(PrepareAsyncModelConfigRaw(context, request, cq));
    }
    ::grpc::Status ModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::inference::ModelStatisticsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelStatisticsResponse>> AsyncModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelStatisticsResponse>>(AsyncModelStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelStatisticsResponse>> PrepareAsyncModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::ModelStatisticsResponse>>(PrepareAsyncModelStatisticsRaw(context, request, cq));
    }
    ::grpc::Status RepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::inference::RepositoryIndexResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryIndexResponse>> AsyncRepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryIndexResponse>>(AsyncRepositoryIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryIndexResponse>> PrepareAsyncRepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryIndexResponse>>(PrepareAsyncRepositoryIndexRaw(context, request, cq));
    }
    ::grpc::Status RepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::inference::RepositoryModelLoadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelLoadResponse>> AsyncRepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelLoadResponse>>(AsyncRepositoryModelLoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelLoadResponse>> PrepareAsyncRepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelLoadResponse>>(PrepareAsyncRepositoryModelLoadRaw(context, request, cq));
    }
    ::grpc::Status RepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::inference::RepositoryModelUnloadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelUnloadResponse>> AsyncRepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelUnloadResponse>>(AsyncRepositoryModelUnloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelUnloadResponse>> PrepareAsyncRepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelUnloadResponse>>(PrepareAsyncRepositoryModelUnloadRaw(context, request, cq));
    }
    ::grpc::Status SystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::inference::SystemSharedMemoryStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryStatusResponse>> AsyncSystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryStatusResponse>>(AsyncSystemSharedMemoryStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryStatusResponse>> PrepareAsyncSystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryStatusResponse>>(PrepareAsyncSystemSharedMemoryStatusRaw(context, request, cq));
    }
    ::grpc::Status SystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::inference::SystemSharedMemoryRegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryRegisterResponse>> AsyncSystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryRegisterResponse>>(AsyncSystemSharedMemoryRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryRegisterResponse>> PrepareAsyncSystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryRegisterResponse>>(PrepareAsyncSystemSharedMemoryRegisterRaw(context, request, cq));
    }
    ::grpc::Status SystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::inference::SystemSharedMemoryUnregisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryUnregisterResponse>> AsyncSystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryUnregisterResponse>>(AsyncSystemSharedMemoryUnregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryUnregisterResponse>> PrepareAsyncSystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryUnregisterResponse>>(PrepareAsyncSystemSharedMemoryUnregisterRaw(context, request, cq));
    }
    ::grpc::Status CudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::inference::CudaSharedMemoryStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryStatusResponse>> AsyncCudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryStatusResponse>>(AsyncCudaSharedMemoryStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryStatusResponse>> PrepareAsyncCudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryStatusResponse>>(PrepareAsyncCudaSharedMemoryStatusRaw(context, request, cq));
    }
    ::grpc::Status CudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::inference::CudaSharedMemoryRegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryRegisterResponse>> AsyncCudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryRegisterResponse>>(AsyncCudaSharedMemoryRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryRegisterResponse>> PrepareAsyncCudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryRegisterResponse>>(PrepareAsyncCudaSharedMemoryRegisterRaw(context, request, cq));
    }
    ::grpc::Status CudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::inference::CudaSharedMemoryUnregisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryUnregisterResponse>> AsyncCudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryUnregisterResponse>>(AsyncCudaSharedMemoryUnregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryUnregisterResponse>> PrepareAsyncCudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryUnregisterResponse>>(PrepareAsyncCudaSharedMemoryUnregisterRaw(context, request, cq));
    }
    ::grpc::Status TraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::inference::TraceSettingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::TraceSettingResponse>> AsyncTraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::TraceSettingResponse>>(AsyncTraceSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::TraceSettingResponse>> PrepareAsyncTraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::TraceSettingResponse>>(PrepareAsyncTraceSettingRaw(context, request, cq));
    }
    ::grpc::Status LogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::inference::LogSettingsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::LogSettingsResponse>> AsyncLogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::LogSettingsResponse>>(AsyncLogSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::LogSettingsResponse>> PrepareAsyncLogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inference::LogSettingsResponse>>(PrepareAsyncLogSettingsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest* request, ::inference::ServerLiveResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest* request, ::inference::ServerLiveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest* request, ::inference::ServerReadyResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest* request, ::inference::ServerReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest* request, ::inference::ModelReadyResponse* response, std::function<void(::grpc::Status)>) override;
      void ModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest* request, ::inference::ModelReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest* request, ::inference::ServerMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest* request, ::inference::ServerMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest* request, ::inference::ModelMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void ModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest* request, ::inference::ModelMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest* request, ::inference::ModelInferResponse* response, std::function<void(::grpc::Status)>) override;
      void ModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest* request, ::inference::ModelInferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModelStreamInfer(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::inference::ModelInferRequest,::inference::ModelStreamInferResponse>* reactor) override;
      void ModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest* request, ::inference::ModelConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void ModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest* request, ::inference::ModelConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest* request, ::inference::ModelStatisticsResponse* response, std::function<void(::grpc::Status)>) override;
      void ModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest* request, ::inference::ModelStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest* request, ::inference::RepositoryIndexResponse* response, std::function<void(::grpc::Status)>) override;
      void RepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest* request, ::inference::RepositoryIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest* request, ::inference::RepositoryModelLoadResponse* response, std::function<void(::grpc::Status)>) override;
      void RepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest* request, ::inference::RepositoryModelLoadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest* request, ::inference::RepositoryModelUnloadResponse* response, std::function<void(::grpc::Status)>) override;
      void RepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest* request, ::inference::RepositoryModelUnloadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest* request, ::inference::SystemSharedMemoryStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest* request, ::inference::SystemSharedMemoryStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest* request, ::inference::SystemSharedMemoryRegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void SystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest* request, ::inference::SystemSharedMemoryRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest* request, ::inference::SystemSharedMemoryUnregisterResponse* response, std::function<void(::grpc::Status)>) override;
      void SystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest* request, ::inference::SystemSharedMemoryUnregisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest* request, ::inference::CudaSharedMemoryStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void CudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest* request, ::inference::CudaSharedMemoryStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest* request, ::inference::CudaSharedMemoryRegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void CudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest* request, ::inference::CudaSharedMemoryRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest* request, ::inference::CudaSharedMemoryUnregisterResponse* response, std::function<void(::grpc::Status)>) override;
      void CudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest* request, ::inference::CudaSharedMemoryUnregisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest* request, ::inference::TraceSettingResponse* response, std::function<void(::grpc::Status)>) override;
      void TraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest* request, ::inference::TraceSettingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest* request, ::inference::LogSettingsResponse* response, std::function<void(::grpc::Status)>) override;
      void LogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest* request, ::inference::LogSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::inference::ServerLiveResponse>* AsyncServerLiveRaw(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ServerLiveResponse>* PrepareAsyncServerLiveRaw(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ServerReadyResponse>* AsyncServerReadyRaw(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ServerReadyResponse>* PrepareAsyncServerReadyRaw(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelReadyResponse>* AsyncModelReadyRaw(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelReadyResponse>* PrepareAsyncModelReadyRaw(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ServerMetadataResponse>* AsyncServerMetadataRaw(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ServerMetadataResponse>* PrepareAsyncServerMetadataRaw(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelMetadataResponse>* AsyncModelMetadataRaw(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelMetadataResponse>* PrepareAsyncModelMetadataRaw(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelInferResponse>* AsyncModelInferRaw(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelInferResponse>* PrepareAsyncModelInferRaw(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* ModelStreamInferRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* AsyncModelStreamInferRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* PrepareAsyncModelStreamInferRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelConfigResponse>* AsyncModelConfigRaw(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelConfigResponse>* PrepareAsyncModelConfigRaw(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelStatisticsResponse>* AsyncModelStatisticsRaw(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::ModelStatisticsResponse>* PrepareAsyncModelStatisticsRaw(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::RepositoryIndexResponse>* AsyncRepositoryIndexRaw(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::RepositoryIndexResponse>* PrepareAsyncRepositoryIndexRaw(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelLoadResponse>* AsyncRepositoryModelLoadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelLoadResponse>* PrepareAsyncRepositoryModelLoadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelUnloadResponse>* AsyncRepositoryModelUnloadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelUnloadResponse>* PrepareAsyncRepositoryModelUnloadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryStatusResponse>* AsyncSystemSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryStatusResponse>* PrepareAsyncSystemSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryRegisterResponse>* AsyncSystemSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryRegisterResponse>* PrepareAsyncSystemSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryUnregisterResponse>* AsyncSystemSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryUnregisterResponse>* PrepareAsyncSystemSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryStatusResponse>* AsyncCudaSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryStatusResponse>* PrepareAsyncCudaSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryRegisterResponse>* AsyncCudaSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryRegisterResponse>* PrepareAsyncCudaSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryUnregisterResponse>* AsyncCudaSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryUnregisterResponse>* PrepareAsyncCudaSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::TraceSettingResponse>* AsyncTraceSettingRaw(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::TraceSettingResponse>* PrepareAsyncTraceSettingRaw(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::LogSettingsResponse>* AsyncLogSettingsRaw(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inference::LogSettingsResponse>* PrepareAsyncLogSettingsRaw(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ServerLive_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerReady_;
    const ::grpc::internal::RpcMethod rpcmethod_ModelReady_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_ModelMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_ModelInfer_;
    const ::grpc::internal::RpcMethod rpcmethod_ModelStreamInfer_;
    const ::grpc::internal::RpcMethod rpcmethod_ModelConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_ModelStatistics_;
    const ::grpc::internal::RpcMethod rpcmethod_RepositoryIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_RepositoryModelLoad_;
    const ::grpc::internal::RpcMethod rpcmethod_RepositoryModelUnload_;
    const ::grpc::internal::RpcMethod rpcmethod_SystemSharedMemoryStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SystemSharedMemoryRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_SystemSharedMemoryUnregister_;
    const ::grpc::internal::RpcMethod rpcmethod_CudaSharedMemoryStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_CudaSharedMemoryRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_CudaSharedMemoryUnregister_;
    const ::grpc::internal::RpcMethod rpcmethod_TraceSetting_;
    const ::grpc::internal::RpcMethod rpcmethod_LogSettings_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // @@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
    // @@       (ServerLiveResponse)
    // @@
    // @@     Check liveness of the inference server.
    // @@
    virtual ::grpc::Status ServerLive(::grpc::ServerContext* context, const ::inference::ServerLiveRequest* request, ::inference::ServerLiveResponse* response);
    // @@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
    // @@       (ServerReadyResponse)
    // @@
    // @@     Check readiness of the inference server.
    // @@
    virtual ::grpc::Status ServerReady(::grpc::ServerContext* context, const ::inference::ServerReadyRequest* request, ::inference::ServerReadyResponse* response);
    // @@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
    // @@       (ModelReadyResponse)
    // @@
    // @@     Check readiness of a model in the inference server.
    // @@
    virtual ::grpc::Status ModelReady(::grpc::ServerContext* context, const ::inference::ModelReadyRequest* request, ::inference::ModelReadyResponse* response);
    // @@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
    // @@       (ServerMetadataResponse)
    // @@
    // @@     Get server metadata.
    // @@
    virtual ::grpc::Status ServerMetadata(::grpc::ServerContext* context, const ::inference::ServerMetadataRequest* request, ::inference::ServerMetadataResponse* response);
    // @@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
    // @@       (ModelMetadataResponse)
    // @@
    // @@     Get model metadata.
    // @@
    virtual ::grpc::Status ModelMetadata(::grpc::ServerContext* context, const ::inference::ModelMetadataRequest* request, ::inference::ModelMetadataResponse* response);
    // @@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
    // @@       (ModelInferResponse)
    // @@
    // @@     Perform inference using a specific model.
    // @@
    virtual ::grpc::Status ModelInfer(::grpc::ServerContext* context, const ::inference::ModelInferRequest* request, ::inference::ModelInferResponse* response);
    // @@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
    // @@       (stream ModelStreamInferResponse)
    // @@
    // @@     Perform streaming inference.
    // @@
    virtual ::grpc::Status ModelStreamInfer(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::inference::ModelStreamInferResponse, ::inference::ModelInferRequest>* stream);
    // @@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
    // @@       (ModelConfigResponse)
    // @@
    // @@     Get model configuration.
    // @@
    virtual ::grpc::Status ModelConfig(::grpc::ServerContext* context, const ::inference::ModelConfigRequest* request, ::inference::ModelConfigResponse* response);
    // @@  .. cpp:var:: rpc ModelStatistics(
    // @@                     ModelStatisticsRequest)
    // @@                   returns (ModelStatisticsResponse)
    // @@
    // @@     Get the cumulative inference statistics for a model.
    // @@
    virtual ::grpc::Status ModelStatistics(::grpc::ServerContext* context, const ::inference::ModelStatisticsRequest* request, ::inference::ModelStatisticsResponse* response);
    // @@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
    // @@       (RepositoryIndexResponse)
    // @@
    // @@     Get the index of model repository contents.
    // @@
    virtual ::grpc::Status RepositoryIndex(::grpc::ServerContext* context, const ::inference::RepositoryIndexRequest* request, ::inference::RepositoryIndexResponse* response);
    // @@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
    // @@       (RepositoryModelLoadResponse)
    // @@
    // @@     Load or reload a model from a repository.
    // @@
    virtual ::grpc::Status RepositoryModelLoad(::grpc::ServerContext* context, const ::inference::RepositoryModelLoadRequest* request, ::inference::RepositoryModelLoadResponse* response);
    // @@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
    // @@       returns (RepositoryModelUnloadResponse)
    // @@
    // @@     Unload a model.
    // @@
    virtual ::grpc::Status RepositoryModelUnload(::grpc::ServerContext* context, const ::inference::RepositoryModelUnloadRequest* request, ::inference::RepositoryModelUnloadResponse* response);
    // @@  .. cpp:var:: rpc SystemSharedMemoryStatus(
    // @@                     SystemSharedMemoryStatusRequest)
    // @@                   returns (SystemSharedMemoryStatusRespose)
    // @@
    // @@     Get the status of all registered system-shared-memory regions.
    // @@
    virtual ::grpc::Status SystemSharedMemoryStatus(::grpc::ServerContext* context, const ::inference::SystemSharedMemoryStatusRequest* request, ::inference::SystemSharedMemoryStatusResponse* response);
    // @@  .. cpp:var:: rpc SystemSharedMemoryRegister(
    // @@                     SystemSharedMemoryRegisterRequest)
    // @@                   returns (SystemSharedMemoryRegisterResponse)
    // @@
    // @@     Register a system-shared-memory region.
    // @@
    virtual ::grpc::Status SystemSharedMemoryRegister(::grpc::ServerContext* context, const ::inference::SystemSharedMemoryRegisterRequest* request, ::inference::SystemSharedMemoryRegisterResponse* response);
    // @@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
    // @@                     SystemSharedMemoryUnregisterRequest)
    // @@                   returns (SystemSharedMemoryUnregisterResponse)
    // @@
    // @@     Unregister a system-shared-memory region.
    // @@
    virtual ::grpc::Status SystemSharedMemoryUnregister(::grpc::ServerContext* context, const ::inference::SystemSharedMemoryUnregisterRequest* request, ::inference::SystemSharedMemoryUnregisterResponse* response);
    // @@  .. cpp:var:: rpc CudaSharedMemoryStatus(
    // @@                     CudaSharedMemoryStatusRequest)
    // @@                   returns (CudaSharedMemoryStatusRespose)
    // @@
    // @@     Get the status of all registered CUDA-shared-memory regions.
    // @@
    virtual ::grpc::Status CudaSharedMemoryStatus(::grpc::ServerContext* context, const ::inference::CudaSharedMemoryStatusRequest* request, ::inference::CudaSharedMemoryStatusResponse* response);
    // @@  .. cpp:var:: rpc CudaSharedMemoryRegister(
    // @@                     CudaSharedMemoryRegisterRequest)
    // @@                   returns (CudaSharedMemoryRegisterResponse)
    // @@
    // @@     Register a CUDA-shared-memory region.
    // @@
    virtual ::grpc::Status CudaSharedMemoryRegister(::grpc::ServerContext* context, const ::inference::CudaSharedMemoryRegisterRequest* request, ::inference::CudaSharedMemoryRegisterResponse* response);
    // @@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
    // @@                     CudaSharedMemoryUnregisterRequest)
    // @@                   returns (CudaSharedMemoryUnregisterResponse)
    // @@
    // @@     Unregister a CUDA-shared-memory region.
    // @@
    virtual ::grpc::Status CudaSharedMemoryUnregister(::grpc::ServerContext* context, const ::inference::CudaSharedMemoryUnregisterRequest* request, ::inference::CudaSharedMemoryUnregisterResponse* response);
    // @@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
    // @@                   returns (TraceSettingResponse)
    // @@
    // @@     Update and get the trace setting of the Triton server.
    // @@
    virtual ::grpc::Status TraceSetting(::grpc::ServerContext* context, const ::inference::TraceSettingRequest* request, ::inference::TraceSettingResponse* response);
    // @@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
    // @@                   returns (LogSettingsResponse)
    // @@
    // @@     Update and get the log settings of the Triton server.
    // @@
    virtual ::grpc::Status LogSettings(::grpc::ServerContext* context, const ::inference::LogSettingsRequest* request, ::inference::LogSettingsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerLive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerLive() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ServerLive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLive(::grpc::ServerContext* /*context*/, const ::inference::ServerLiveRequest* /*request*/, ::inference::ServerLiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerLive(::grpc::ServerContext* context, ::inference::ServerLiveRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::ServerLiveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerReady() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ServerReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerReady(::grpc::ServerContext* /*context*/, const ::inference::ServerReadyRequest* /*request*/, ::inference::ServerReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerReady(::grpc::ServerContext* context, ::inference::ServerReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::ServerReadyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModelReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModelReady() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ModelReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelReady(::grpc::ServerContext* /*context*/, const ::inference::ModelReadyRequest* /*request*/, ::inference::ModelReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelReady(::grpc::ServerContext* context, ::inference::ModelReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::ModelReadyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::inference::ServerMetadataRequest* /*request*/, ::inference::ServerMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerMetadata(::grpc::ServerContext* context, ::inference::ServerMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::ServerMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::inference::ModelMetadataRequest* /*request*/, ::inference::ModelMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelMetadata(::grpc::ServerContext* context, ::inference::ModelMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::ModelMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModelInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModelInfer() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ModelInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelInfer(::grpc::ServerContext* /*context*/, const ::inference::ModelInferRequest* /*request*/, ::inference::ModelInferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelInfer(::grpc::ServerContext* context, ::inference::ModelInferRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::ModelInferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModelStreamInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModelStreamInfer() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ModelStreamInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStreamInfer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::inference::ModelStreamInferResponse, ::inference::ModelInferRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelStreamInfer(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::inference::ModelStreamInferResponse, ::inference::ModelInferRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModelConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModelConfig() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ModelConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelConfig(::grpc::ServerContext* /*context*/, const ::inference::ModelConfigRequest* /*request*/, ::inference::ModelConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelConfig(::grpc::ServerContext* context, ::inference::ModelConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::ModelConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModelStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModelStatistics() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ModelStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStatistics(::grpc::ServerContext* /*context*/, const ::inference::ModelStatisticsRequest* /*request*/, ::inference::ModelStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelStatistics(::grpc::ServerContext* context, ::inference::ModelStatisticsRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::ModelStatisticsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RepositoryIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RepositoryIndex() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_RepositoryIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryIndex(::grpc::ServerContext* /*context*/, const ::inference::RepositoryIndexRequest* /*request*/, ::inference::RepositoryIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepositoryIndex(::grpc::ServerContext* context, ::inference::RepositoryIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::RepositoryIndexResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RepositoryModelLoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RepositoryModelLoad() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_RepositoryModelLoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelLoad(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelLoadRequest* /*request*/, ::inference::RepositoryModelLoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepositoryModelLoad(::grpc::ServerContext* context, ::inference::RepositoryModelLoadRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::RepositoryModelLoadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RepositoryModelUnload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RepositoryModelUnload() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_RepositoryModelUnload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelUnload(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelUnloadRequest* /*request*/, ::inference::RepositoryModelUnloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepositoryModelUnload(::grpc::ServerContext* context, ::inference::RepositoryModelUnloadRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::RepositoryModelUnloadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SystemSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SystemSharedMemoryStatus() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SystemSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryStatusRequest* /*request*/, ::inference::SystemSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemSharedMemoryStatus(::grpc::ServerContext* context, ::inference::SystemSharedMemoryStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::SystemSharedMemoryStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SystemSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SystemSharedMemoryRegister() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SystemSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryRegisterRequest* /*request*/, ::inference::SystemSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemSharedMemoryRegister(::grpc::ServerContext* context, ::inference::SystemSharedMemoryRegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::SystemSharedMemoryRegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SystemSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SystemSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SystemSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryUnregisterRequest* /*request*/, ::inference::SystemSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemSharedMemoryUnregister(::grpc::ServerContext* context, ::inference::SystemSharedMemoryUnregisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::SystemSharedMemoryUnregisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CudaSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CudaSharedMemoryStatus() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_CudaSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryStatusRequest* /*request*/, ::inference::CudaSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCudaSharedMemoryStatus(::grpc::ServerContext* context, ::inference::CudaSharedMemoryStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::CudaSharedMemoryStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CudaSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CudaSharedMemoryRegister() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_CudaSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryRegisterRequest* /*request*/, ::inference::CudaSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCudaSharedMemoryRegister(::grpc::ServerContext* context, ::inference::CudaSharedMemoryRegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::CudaSharedMemoryRegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CudaSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CudaSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_CudaSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryUnregisterRequest* /*request*/, ::inference::CudaSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCudaSharedMemoryUnregister(::grpc::ServerContext* context, ::inference::CudaSharedMemoryUnregisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::CudaSharedMemoryUnregisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TraceSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TraceSetting() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_TraceSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TraceSetting(::grpc::ServerContext* /*context*/, const ::inference::TraceSettingRequest* /*request*/, ::inference::TraceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTraceSetting(::grpc::ServerContext* context, ::inference::TraceSettingRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::TraceSettingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LogSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogSettings() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_LogSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogSettings(::grpc::ServerContext* /*context*/, const ::inference::LogSettingsRequest* /*request*/, ::inference::LogSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogSettings(::grpc::ServerContext* context, ::inference::LogSettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::inference::LogSettingsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ServerLive<WithAsyncMethod_ServerReady<WithAsyncMethod_ModelReady<WithAsyncMethod_ServerMetadata<WithAsyncMethod_ModelMetadata<WithAsyncMethod_ModelInfer<WithAsyncMethod_ModelStreamInfer<WithAsyncMethod_ModelConfig<WithAsyncMethod_ModelStatistics<WithAsyncMethod_RepositoryIndex<WithAsyncMethod_RepositoryModelLoad<WithAsyncMethod_RepositoryModelUnload<WithAsyncMethod_SystemSharedMemoryStatus<WithAsyncMethod_SystemSharedMemoryRegister<WithAsyncMethod_SystemSharedMemoryUnregister<WithAsyncMethod_CudaSharedMemoryStatus<WithAsyncMethod_CudaSharedMemoryRegister<WithAsyncMethod_CudaSharedMemoryUnregister<WithAsyncMethod_TraceSetting<WithAsyncMethod_LogSettings<Service > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ServerLive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerLive() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::ServerLiveRequest, ::inference::ServerLiveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::ServerLiveRequest* request, ::inference::ServerLiveResponse* response) { return this->ServerLive(context, request, response); }));}
    void SetMessageAllocatorFor_ServerLive(
        ::grpc::MessageAllocator< ::inference::ServerLiveRequest, ::inference::ServerLiveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::ServerLiveRequest, ::inference::ServerLiveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerLive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLive(::grpc::ServerContext* /*context*/, const ::inference::ServerLiveRequest* /*request*/, ::inference::ServerLiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerLive(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::ServerLiveRequest* /*request*/, ::inference::ServerLiveResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerReady() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::ServerReadyRequest, ::inference::ServerReadyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::ServerReadyRequest* request, ::inference::ServerReadyResponse* response) { return this->ServerReady(context, request, response); }));}
    void SetMessageAllocatorFor_ServerReady(
        ::grpc::MessageAllocator< ::inference::ServerReadyRequest, ::inference::ServerReadyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::ServerReadyRequest, ::inference::ServerReadyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerReady(::grpc::ServerContext* /*context*/, const ::inference::ServerReadyRequest* /*request*/, ::inference::ServerReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerReady(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::ServerReadyRequest* /*request*/, ::inference::ServerReadyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModelReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModelReady() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::ModelReadyRequest, ::inference::ModelReadyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::ModelReadyRequest* request, ::inference::ModelReadyResponse* response) { return this->ModelReady(context, request, response); }));}
    void SetMessageAllocatorFor_ModelReady(
        ::grpc::MessageAllocator< ::inference::ModelReadyRequest, ::inference::ModelReadyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::ModelReadyRequest, ::inference::ModelReadyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModelReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelReady(::grpc::ServerContext* /*context*/, const ::inference::ModelReadyRequest* /*request*/, ::inference::ModelReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelReady(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::ModelReadyRequest* /*request*/, ::inference::ModelReadyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::ServerMetadataRequest, ::inference::ServerMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::ServerMetadataRequest* request, ::inference::ServerMetadataResponse* response) { return this->ServerMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_ServerMetadata(
        ::grpc::MessageAllocator< ::inference::ServerMetadataRequest, ::inference::ServerMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::ServerMetadataRequest, ::inference::ServerMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::inference::ServerMetadataRequest* /*request*/, ::inference::ServerMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::ServerMetadataRequest* /*request*/, ::inference::ServerMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::ModelMetadataRequest, ::inference::ModelMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::ModelMetadataRequest* request, ::inference::ModelMetadataResponse* response) { return this->ModelMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_ModelMetadata(
        ::grpc::MessageAllocator< ::inference::ModelMetadataRequest, ::inference::ModelMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::ModelMetadataRequest, ::inference::ModelMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::inference::ModelMetadataRequest* /*request*/, ::inference::ModelMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::ModelMetadataRequest* /*request*/, ::inference::ModelMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModelInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModelInfer() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::ModelInferRequest, ::inference::ModelInferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::ModelInferRequest* request, ::inference::ModelInferResponse* response) { return this->ModelInfer(context, request, response); }));}
    void SetMessageAllocatorFor_ModelInfer(
        ::grpc::MessageAllocator< ::inference::ModelInferRequest, ::inference::ModelInferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::ModelInferRequest, ::inference::ModelInferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModelInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelInfer(::grpc::ServerContext* /*context*/, const ::inference::ModelInferRequest* /*request*/, ::inference::ModelInferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelInfer(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::ModelInferRequest* /*request*/, ::inference::ModelInferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModelStreamInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModelStreamInfer() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackBidiHandler< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ModelStreamInfer(context); }));
    }
    ~WithCallbackMethod_ModelStreamInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStreamInfer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::inference::ModelStreamInferResponse, ::inference::ModelInferRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* ModelStreamInfer(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModelConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModelConfig() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::ModelConfigRequest, ::inference::ModelConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::ModelConfigRequest* request, ::inference::ModelConfigResponse* response) { return this->ModelConfig(context, request, response); }));}
    void SetMessageAllocatorFor_ModelConfig(
        ::grpc::MessageAllocator< ::inference::ModelConfigRequest, ::inference::ModelConfigResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::ModelConfigRequest, ::inference::ModelConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModelConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelConfig(::grpc::ServerContext* /*context*/, const ::inference::ModelConfigRequest* /*request*/, ::inference::ModelConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::ModelConfigRequest* /*request*/, ::inference::ModelConfigResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModelStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModelStatistics() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::ModelStatisticsRequest, ::inference::ModelStatisticsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::ModelStatisticsRequest* request, ::inference::ModelStatisticsResponse* response) { return this->ModelStatistics(context, request, response); }));}
    void SetMessageAllocatorFor_ModelStatistics(
        ::grpc::MessageAllocator< ::inference::ModelStatisticsRequest, ::inference::ModelStatisticsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::ModelStatisticsRequest, ::inference::ModelStatisticsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModelStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStatistics(::grpc::ServerContext* /*context*/, const ::inference::ModelStatisticsRequest* /*request*/, ::inference::ModelStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::ModelStatisticsRequest* /*request*/, ::inference::ModelStatisticsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RepositoryIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RepositoryIndex() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::RepositoryIndexRequest, ::inference::RepositoryIndexResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::RepositoryIndexRequest* request, ::inference::RepositoryIndexResponse* response) { return this->RepositoryIndex(context, request, response); }));}
    void SetMessageAllocatorFor_RepositoryIndex(
        ::grpc::MessageAllocator< ::inference::RepositoryIndexRequest, ::inference::RepositoryIndexResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::RepositoryIndexRequest, ::inference::RepositoryIndexResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RepositoryIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryIndex(::grpc::ServerContext* /*context*/, const ::inference::RepositoryIndexRequest* /*request*/, ::inference::RepositoryIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RepositoryIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::RepositoryIndexRequest* /*request*/, ::inference::RepositoryIndexResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RepositoryModelLoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RepositoryModelLoad() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::RepositoryModelLoadRequest, ::inference::RepositoryModelLoadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::RepositoryModelLoadRequest* request, ::inference::RepositoryModelLoadResponse* response) { return this->RepositoryModelLoad(context, request, response); }));}
    void SetMessageAllocatorFor_RepositoryModelLoad(
        ::grpc::MessageAllocator< ::inference::RepositoryModelLoadRequest, ::inference::RepositoryModelLoadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::RepositoryModelLoadRequest, ::inference::RepositoryModelLoadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RepositoryModelLoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelLoad(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelLoadRequest* /*request*/, ::inference::RepositoryModelLoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RepositoryModelLoad(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::RepositoryModelLoadRequest* /*request*/, ::inference::RepositoryModelLoadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RepositoryModelUnload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RepositoryModelUnload() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::RepositoryModelUnloadRequest, ::inference::RepositoryModelUnloadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::RepositoryModelUnloadRequest* request, ::inference::RepositoryModelUnloadResponse* response) { return this->RepositoryModelUnload(context, request, response); }));}
    void SetMessageAllocatorFor_RepositoryModelUnload(
        ::grpc::MessageAllocator< ::inference::RepositoryModelUnloadRequest, ::inference::RepositoryModelUnloadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::RepositoryModelUnloadRequest, ::inference::RepositoryModelUnloadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RepositoryModelUnload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelUnload(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelUnloadRequest* /*request*/, ::inference::RepositoryModelUnloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RepositoryModelUnload(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::RepositoryModelUnloadRequest* /*request*/, ::inference::RepositoryModelUnloadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SystemSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SystemSharedMemoryStatus() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::SystemSharedMemoryStatusRequest, ::inference::SystemSharedMemoryStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::SystemSharedMemoryStatusRequest* request, ::inference::SystemSharedMemoryStatusResponse* response) { return this->SystemSharedMemoryStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SystemSharedMemoryStatus(
        ::grpc::MessageAllocator< ::inference::SystemSharedMemoryStatusRequest, ::inference::SystemSharedMemoryStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::SystemSharedMemoryStatusRequest, ::inference::SystemSharedMemoryStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SystemSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryStatusRequest* /*request*/, ::inference::SystemSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemSharedMemoryStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::SystemSharedMemoryStatusRequest* /*request*/, ::inference::SystemSharedMemoryStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SystemSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SystemSharedMemoryRegister() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::SystemSharedMemoryRegisterRequest, ::inference::SystemSharedMemoryRegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::SystemSharedMemoryRegisterRequest* request, ::inference::SystemSharedMemoryRegisterResponse* response) { return this->SystemSharedMemoryRegister(context, request, response); }));}
    void SetMessageAllocatorFor_SystemSharedMemoryRegister(
        ::grpc::MessageAllocator< ::inference::SystemSharedMemoryRegisterRequest, ::inference::SystemSharedMemoryRegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::SystemSharedMemoryRegisterRequest, ::inference::SystemSharedMemoryRegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SystemSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryRegisterRequest* /*request*/, ::inference::SystemSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemSharedMemoryRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::SystemSharedMemoryRegisterRequest* /*request*/, ::inference::SystemSharedMemoryRegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SystemSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SystemSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::SystemSharedMemoryUnregisterRequest, ::inference::SystemSharedMemoryUnregisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::SystemSharedMemoryUnregisterRequest* request, ::inference::SystemSharedMemoryUnregisterResponse* response) { return this->SystemSharedMemoryUnregister(context, request, response); }));}
    void SetMessageAllocatorFor_SystemSharedMemoryUnregister(
        ::grpc::MessageAllocator< ::inference::SystemSharedMemoryUnregisterRequest, ::inference::SystemSharedMemoryUnregisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::SystemSharedMemoryUnregisterRequest, ::inference::SystemSharedMemoryUnregisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SystemSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryUnregisterRequest* /*request*/, ::inference::SystemSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemSharedMemoryUnregister(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::SystemSharedMemoryUnregisterRequest* /*request*/, ::inference::SystemSharedMemoryUnregisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CudaSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CudaSharedMemoryStatus() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::CudaSharedMemoryStatusRequest, ::inference::CudaSharedMemoryStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::CudaSharedMemoryStatusRequest* request, ::inference::CudaSharedMemoryStatusResponse* response) { return this->CudaSharedMemoryStatus(context, request, response); }));}
    void SetMessageAllocatorFor_CudaSharedMemoryStatus(
        ::grpc::MessageAllocator< ::inference::CudaSharedMemoryStatusRequest, ::inference::CudaSharedMemoryStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::CudaSharedMemoryStatusRequest, ::inference::CudaSharedMemoryStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CudaSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryStatusRequest* /*request*/, ::inference::CudaSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CudaSharedMemoryStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::CudaSharedMemoryStatusRequest* /*request*/, ::inference::CudaSharedMemoryStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CudaSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CudaSharedMemoryRegister() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::CudaSharedMemoryRegisterRequest, ::inference::CudaSharedMemoryRegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::CudaSharedMemoryRegisterRequest* request, ::inference::CudaSharedMemoryRegisterResponse* response) { return this->CudaSharedMemoryRegister(context, request, response); }));}
    void SetMessageAllocatorFor_CudaSharedMemoryRegister(
        ::grpc::MessageAllocator< ::inference::CudaSharedMemoryRegisterRequest, ::inference::CudaSharedMemoryRegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::CudaSharedMemoryRegisterRequest, ::inference::CudaSharedMemoryRegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CudaSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryRegisterRequest* /*request*/, ::inference::CudaSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CudaSharedMemoryRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::CudaSharedMemoryRegisterRequest* /*request*/, ::inference::CudaSharedMemoryRegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CudaSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CudaSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::CudaSharedMemoryUnregisterRequest, ::inference::CudaSharedMemoryUnregisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::CudaSharedMemoryUnregisterRequest* request, ::inference::CudaSharedMemoryUnregisterResponse* response) { return this->CudaSharedMemoryUnregister(context, request, response); }));}
    void SetMessageAllocatorFor_CudaSharedMemoryUnregister(
        ::grpc::MessageAllocator< ::inference::CudaSharedMemoryUnregisterRequest, ::inference::CudaSharedMemoryUnregisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::CudaSharedMemoryUnregisterRequest, ::inference::CudaSharedMemoryUnregisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CudaSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryUnregisterRequest* /*request*/, ::inference::CudaSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CudaSharedMemoryUnregister(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::CudaSharedMemoryUnregisterRequest* /*request*/, ::inference::CudaSharedMemoryUnregisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TraceSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TraceSetting() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::TraceSettingRequest, ::inference::TraceSettingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::TraceSettingRequest* request, ::inference::TraceSettingResponse* response) { return this->TraceSetting(context, request, response); }));}
    void SetMessageAllocatorFor_TraceSetting(
        ::grpc::MessageAllocator< ::inference::TraceSettingRequest, ::inference::TraceSettingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::TraceSettingRequest, ::inference::TraceSettingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TraceSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TraceSetting(::grpc::ServerContext* /*context*/, const ::inference::TraceSettingRequest* /*request*/, ::inference::TraceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TraceSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::TraceSettingRequest* /*request*/, ::inference::TraceSettingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LogSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LogSettings() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::inference::LogSettingsRequest, ::inference::LogSettingsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inference::LogSettingsRequest* request, ::inference::LogSettingsResponse* response) { return this->LogSettings(context, request, response); }));}
    void SetMessageAllocatorFor_LogSettings(
        ::grpc::MessageAllocator< ::inference::LogSettingsRequest, ::inference::LogSettingsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inference::LogSettingsRequest, ::inference::LogSettingsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LogSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogSettings(::grpc::ServerContext* /*context*/, const ::inference::LogSettingsRequest* /*request*/, ::inference::LogSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::inference::LogSettingsRequest* /*request*/, ::inference::LogSettingsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ServerLive<WithCallbackMethod_ServerReady<WithCallbackMethod_ModelReady<WithCallbackMethod_ServerMetadata<WithCallbackMethod_ModelMetadata<WithCallbackMethod_ModelInfer<WithCallbackMethod_ModelStreamInfer<WithCallbackMethod_ModelConfig<WithCallbackMethod_ModelStatistics<WithCallbackMethod_RepositoryIndex<WithCallbackMethod_RepositoryModelLoad<WithCallbackMethod_RepositoryModelUnload<WithCallbackMethod_SystemSharedMemoryStatus<WithCallbackMethod_SystemSharedMemoryRegister<WithCallbackMethod_SystemSharedMemoryUnregister<WithCallbackMethod_CudaSharedMemoryStatus<WithCallbackMethod_CudaSharedMemoryRegister<WithCallbackMethod_CudaSharedMemoryUnregister<WithCallbackMethod_TraceSetting<WithCallbackMethod_LogSettings<Service > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ServerLive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerLive() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ServerLive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLive(::grpc::ServerContext* /*context*/, const ::inference::ServerLiveRequest* /*request*/, ::inference::ServerLiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerReady() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ServerReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerReady(::grpc::ServerContext* /*context*/, const ::inference::ServerReadyRequest* /*request*/, ::inference::ServerReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModelReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModelReady() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ModelReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelReady(::grpc::ServerContext* /*context*/, const ::inference::ModelReadyRequest* /*request*/, ::inference::ModelReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::inference::ServerMetadataRequest* /*request*/, ::inference::ServerMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::inference::ModelMetadataRequest* /*request*/, ::inference::ModelMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModelInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModelInfer() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ModelInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelInfer(::grpc::ServerContext* /*context*/, const ::inference::ModelInferRequest* /*request*/, ::inference::ModelInferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModelStreamInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModelStreamInfer() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ModelStreamInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStreamInfer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::inference::ModelStreamInferResponse, ::inference::ModelInferRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModelConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModelConfig() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ModelConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelConfig(::grpc::ServerContext* /*context*/, const ::inference::ModelConfigRequest* /*request*/, ::inference::ModelConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModelStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModelStatistics() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ModelStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStatistics(::grpc::ServerContext* /*context*/, const ::inference::ModelStatisticsRequest* /*request*/, ::inference::ModelStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RepositoryIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RepositoryIndex() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_RepositoryIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryIndex(::grpc::ServerContext* /*context*/, const ::inference::RepositoryIndexRequest* /*request*/, ::inference::RepositoryIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RepositoryModelLoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RepositoryModelLoad() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_RepositoryModelLoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelLoad(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelLoadRequest* /*request*/, ::inference::RepositoryModelLoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RepositoryModelUnload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RepositoryModelUnload() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_RepositoryModelUnload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelUnload(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelUnloadRequest* /*request*/, ::inference::RepositoryModelUnloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SystemSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SystemSharedMemoryStatus() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SystemSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryStatusRequest* /*request*/, ::inference::SystemSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SystemSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SystemSharedMemoryRegister() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SystemSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryRegisterRequest* /*request*/, ::inference::SystemSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SystemSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SystemSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SystemSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryUnregisterRequest* /*request*/, ::inference::SystemSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CudaSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CudaSharedMemoryStatus() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_CudaSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryStatusRequest* /*request*/, ::inference::CudaSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CudaSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CudaSharedMemoryRegister() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_CudaSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryRegisterRequest* /*request*/, ::inference::CudaSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CudaSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CudaSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_CudaSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryUnregisterRequest* /*request*/, ::inference::CudaSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TraceSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TraceSetting() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_TraceSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TraceSetting(::grpc::ServerContext* /*context*/, const ::inference::TraceSettingRequest* /*request*/, ::inference::TraceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LogSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogSettings() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_LogSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogSettings(::grpc::ServerContext* /*context*/, const ::inference::LogSettingsRequest* /*request*/, ::inference::LogSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerLive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerLive() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ServerLive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLive(::grpc::ServerContext* /*context*/, const ::inference::ServerLiveRequest* /*request*/, ::inference::ServerLiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerLive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerReady() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ServerReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerReady(::grpc::ServerContext* /*context*/, const ::inference::ServerReadyRequest* /*request*/, ::inference::ServerReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModelReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModelReady() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ModelReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelReady(::grpc::ServerContext* /*context*/, const ::inference::ModelReadyRequest* /*request*/, ::inference::ModelReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::inference::ServerMetadataRequest* /*request*/, ::inference::ServerMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::inference::ModelMetadataRequest* /*request*/, ::inference::ModelMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModelInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModelInfer() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ModelInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelInfer(::grpc::ServerContext* /*context*/, const ::inference::ModelInferRequest* /*request*/, ::inference::ModelInferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelInfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModelStreamInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModelStreamInfer() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ModelStreamInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStreamInfer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::inference::ModelStreamInferResponse, ::inference::ModelInferRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelStreamInfer(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModelConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModelConfig() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ModelConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelConfig(::grpc::ServerContext* /*context*/, const ::inference::ModelConfigRequest* /*request*/, ::inference::ModelConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModelStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModelStatistics() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ModelStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStatistics(::grpc::ServerContext* /*context*/, const ::inference::ModelStatisticsRequest* /*request*/, ::inference::ModelStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RepositoryIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RepositoryIndex() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_RepositoryIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryIndex(::grpc::ServerContext* /*context*/, const ::inference::RepositoryIndexRequest* /*request*/, ::inference::RepositoryIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepositoryIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RepositoryModelLoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RepositoryModelLoad() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_RepositoryModelLoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelLoad(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelLoadRequest* /*request*/, ::inference::RepositoryModelLoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepositoryModelLoad(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RepositoryModelUnload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RepositoryModelUnload() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_RepositoryModelUnload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelUnload(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelUnloadRequest* /*request*/, ::inference::RepositoryModelUnloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepositoryModelUnload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SystemSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SystemSharedMemoryStatus() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SystemSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryStatusRequest* /*request*/, ::inference::SystemSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemSharedMemoryStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SystemSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SystemSharedMemoryRegister() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SystemSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryRegisterRequest* /*request*/, ::inference::SystemSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemSharedMemoryRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SystemSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SystemSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SystemSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryUnregisterRequest* /*request*/, ::inference::SystemSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemSharedMemoryUnregister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CudaSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CudaSharedMemoryStatus() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_CudaSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryStatusRequest* /*request*/, ::inference::CudaSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCudaSharedMemoryStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CudaSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CudaSharedMemoryRegister() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_CudaSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryRegisterRequest* /*request*/, ::inference::CudaSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCudaSharedMemoryRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CudaSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CudaSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_CudaSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryUnregisterRequest* /*request*/, ::inference::CudaSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCudaSharedMemoryUnregister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TraceSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TraceSetting() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_TraceSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TraceSetting(::grpc::ServerContext* /*context*/, const ::inference::TraceSettingRequest* /*request*/, ::inference::TraceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTraceSetting(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogSettings() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_LogSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogSettings(::grpc::ServerContext* /*context*/, const ::inference::LogSettingsRequest* /*request*/, ::inference::LogSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerLive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerLive() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerLive(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerLive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLive(::grpc::ServerContext* /*context*/, const ::inference::ServerLiveRequest* /*request*/, ::inference::ServerLiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerLive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerReady() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerReady(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerReady(::grpc::ServerContext* /*context*/, const ::inference::ServerReadyRequest* /*request*/, ::inference::ServerReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerReady(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModelReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModelReady() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModelReady(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModelReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelReady(::grpc::ServerContext* /*context*/, const ::inference::ModelReadyRequest* /*request*/, ::inference::ModelReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelReady(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::inference::ServerMetadataRequest* /*request*/, ::inference::ServerMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModelMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::inference::ModelMetadataRequest* /*request*/, ::inference::ModelMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModelInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModelInfer() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModelInfer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModelInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelInfer(::grpc::ServerContext* /*context*/, const ::inference::ModelInferRequest* /*request*/, ::inference::ModelInferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelInfer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModelStreamInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModelStreamInfer() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ModelStreamInfer(context); }));
    }
    ~WithRawCallbackMethod_ModelStreamInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStreamInfer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::inference::ModelStreamInferResponse, ::inference::ModelInferRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ModelStreamInfer(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModelConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModelConfig() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModelConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModelConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelConfig(::grpc::ServerContext* /*context*/, const ::inference::ModelConfigRequest* /*request*/, ::inference::ModelConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModelStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModelStatistics() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModelStatistics(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModelStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelStatistics(::grpc::ServerContext* /*context*/, const ::inference::ModelStatisticsRequest* /*request*/, ::inference::ModelStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModelStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RepositoryIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RepositoryIndex() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RepositoryIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_RepositoryIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryIndex(::grpc::ServerContext* /*context*/, const ::inference::RepositoryIndexRequest* /*request*/, ::inference::RepositoryIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RepositoryIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RepositoryModelLoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RepositoryModelLoad() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RepositoryModelLoad(context, request, response); }));
    }
    ~WithRawCallbackMethod_RepositoryModelLoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelLoad(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelLoadRequest* /*request*/, ::inference::RepositoryModelLoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RepositoryModelLoad(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RepositoryModelUnload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RepositoryModelUnload() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RepositoryModelUnload(context, request, response); }));
    }
    ~WithRawCallbackMethod_RepositoryModelUnload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepositoryModelUnload(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelUnloadRequest* /*request*/, ::inference::RepositoryModelUnloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RepositoryModelUnload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SystemSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SystemSharedMemoryStatus() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SystemSharedMemoryStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SystemSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryStatusRequest* /*request*/, ::inference::SystemSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemSharedMemoryStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SystemSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SystemSharedMemoryRegister() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SystemSharedMemoryRegister(context, request, response); }));
    }
    ~WithRawCallbackMethod_SystemSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryRegisterRequest* /*request*/, ::inference::SystemSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemSharedMemoryRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SystemSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SystemSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SystemSharedMemoryUnregister(context, request, response); }));
    }
    ~WithRawCallbackMethod_SystemSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryUnregisterRequest* /*request*/, ::inference::SystemSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemSharedMemoryUnregister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CudaSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CudaSharedMemoryStatus() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CudaSharedMemoryStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_CudaSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryStatusRequest* /*request*/, ::inference::CudaSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CudaSharedMemoryStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CudaSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CudaSharedMemoryRegister() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CudaSharedMemoryRegister(context, request, response); }));
    }
    ~WithRawCallbackMethod_CudaSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryRegisterRequest* /*request*/, ::inference::CudaSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CudaSharedMemoryRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CudaSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CudaSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CudaSharedMemoryUnregister(context, request, response); }));
    }
    ~WithRawCallbackMethod_CudaSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CudaSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryUnregisterRequest* /*request*/, ::inference::CudaSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CudaSharedMemoryUnregister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TraceSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TraceSetting() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TraceSetting(context, request, response); }));
    }
    ~WithRawCallbackMethod_TraceSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TraceSetting(::grpc::ServerContext* /*context*/, const ::inference::TraceSettingRequest* /*request*/, ::inference::TraceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TraceSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LogSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LogSettings() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_LogSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogSettings(::grpc::ServerContext* /*context*/, const ::inference::LogSettingsRequest* /*request*/, ::inference::LogSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerLive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerLive() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::ServerLiveRequest, ::inference::ServerLiveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::ServerLiveRequest, ::inference::ServerLiveResponse>* streamer) {
                       return this->StreamedServerLive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerLive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerLive(::grpc::ServerContext* /*context*/, const ::inference::ServerLiveRequest* /*request*/, ::inference::ServerLiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerLive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::ServerLiveRequest,::inference::ServerLiveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerReady() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::ServerReadyRequest, ::inference::ServerReadyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::ServerReadyRequest, ::inference::ServerReadyResponse>* streamer) {
                       return this->StreamedServerReady(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerReady(::grpc::ServerContext* /*context*/, const ::inference::ServerReadyRequest* /*request*/, ::inference::ServerReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::ServerReadyRequest,::inference::ServerReadyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModelReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModelReady() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::ModelReadyRequest, ::inference::ModelReadyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::ModelReadyRequest, ::inference::ModelReadyResponse>* streamer) {
                       return this->StreamedModelReady(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModelReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModelReady(::grpc::ServerContext* /*context*/, const ::inference::ModelReadyRequest* /*request*/, ::inference::ModelReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModelReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::ModelReadyRequest,::inference::ModelReadyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::ServerMetadataRequest, ::inference::ServerMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::ServerMetadataRequest, ::inference::ServerMetadataResponse>* streamer) {
                       return this->StreamedServerMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::inference::ServerMetadataRequest* /*request*/, ::inference::ServerMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::ServerMetadataRequest,::inference::ServerMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::ModelMetadataRequest, ::inference::ModelMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::ModelMetadataRequest, ::inference::ModelMetadataResponse>* streamer) {
                       return this->StreamedModelMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::inference::ModelMetadataRequest* /*request*/, ::inference::ModelMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModelMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::ModelMetadataRequest,::inference::ModelMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModelInfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModelInfer() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::ModelInferRequest, ::inference::ModelInferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::ModelInferRequest, ::inference::ModelInferResponse>* streamer) {
                       return this->StreamedModelInfer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModelInfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModelInfer(::grpc::ServerContext* /*context*/, const ::inference::ModelInferRequest* /*request*/, ::inference::ModelInferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModelInfer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::ModelInferRequest,::inference::ModelInferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModelConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModelConfig() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::ModelConfigRequest, ::inference::ModelConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::ModelConfigRequest, ::inference::ModelConfigResponse>* streamer) {
                       return this->StreamedModelConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModelConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModelConfig(::grpc::ServerContext* /*context*/, const ::inference::ModelConfigRequest* /*request*/, ::inference::ModelConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModelConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::ModelConfigRequest,::inference::ModelConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModelStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModelStatistics() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::ModelStatisticsRequest, ::inference::ModelStatisticsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::ModelStatisticsRequest, ::inference::ModelStatisticsResponse>* streamer) {
                       return this->StreamedModelStatistics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModelStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModelStatistics(::grpc::ServerContext* /*context*/, const ::inference::ModelStatisticsRequest* /*request*/, ::inference::ModelStatisticsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModelStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::ModelStatisticsRequest,::inference::ModelStatisticsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RepositoryIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RepositoryIndex() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::RepositoryIndexRequest, ::inference::RepositoryIndexResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::RepositoryIndexRequest, ::inference::RepositoryIndexResponse>* streamer) {
                       return this->StreamedRepositoryIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RepositoryIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RepositoryIndex(::grpc::ServerContext* /*context*/, const ::inference::RepositoryIndexRequest* /*request*/, ::inference::RepositoryIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRepositoryIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::RepositoryIndexRequest,::inference::RepositoryIndexResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RepositoryModelLoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RepositoryModelLoad() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::RepositoryModelLoadRequest, ::inference::RepositoryModelLoadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::RepositoryModelLoadRequest, ::inference::RepositoryModelLoadResponse>* streamer) {
                       return this->StreamedRepositoryModelLoad(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RepositoryModelLoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RepositoryModelLoad(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelLoadRequest* /*request*/, ::inference::RepositoryModelLoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRepositoryModelLoad(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::RepositoryModelLoadRequest,::inference::RepositoryModelLoadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RepositoryModelUnload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RepositoryModelUnload() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::RepositoryModelUnloadRequest, ::inference::RepositoryModelUnloadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::RepositoryModelUnloadRequest, ::inference::RepositoryModelUnloadResponse>* streamer) {
                       return this->StreamedRepositoryModelUnload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RepositoryModelUnload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RepositoryModelUnload(::grpc::ServerContext* /*context*/, const ::inference::RepositoryModelUnloadRequest* /*request*/, ::inference::RepositoryModelUnloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRepositoryModelUnload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::RepositoryModelUnloadRequest,::inference::RepositoryModelUnloadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SystemSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SystemSharedMemoryStatus() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::SystemSharedMemoryStatusRequest, ::inference::SystemSharedMemoryStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::SystemSharedMemoryStatusRequest, ::inference::SystemSharedMemoryStatusResponse>* streamer) {
                       return this->StreamedSystemSharedMemoryStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SystemSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SystemSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryStatusRequest* /*request*/, ::inference::SystemSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSystemSharedMemoryStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::SystemSharedMemoryStatusRequest,::inference::SystemSharedMemoryStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SystemSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SystemSharedMemoryRegister() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::SystemSharedMemoryRegisterRequest, ::inference::SystemSharedMemoryRegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::SystemSharedMemoryRegisterRequest, ::inference::SystemSharedMemoryRegisterResponse>* streamer) {
                       return this->StreamedSystemSharedMemoryRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SystemSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SystemSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryRegisterRequest* /*request*/, ::inference::SystemSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSystemSharedMemoryRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::SystemSharedMemoryRegisterRequest,::inference::SystemSharedMemoryRegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SystemSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SystemSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::SystemSharedMemoryUnregisterRequest, ::inference::SystemSharedMemoryUnregisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::SystemSharedMemoryUnregisterRequest, ::inference::SystemSharedMemoryUnregisterResponse>* streamer) {
                       return this->StreamedSystemSharedMemoryUnregister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SystemSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SystemSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::SystemSharedMemoryUnregisterRequest* /*request*/, ::inference::SystemSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSystemSharedMemoryUnregister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::SystemSharedMemoryUnregisterRequest,::inference::SystemSharedMemoryUnregisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CudaSharedMemoryStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CudaSharedMemoryStatus() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::CudaSharedMemoryStatusRequest, ::inference::CudaSharedMemoryStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::CudaSharedMemoryStatusRequest, ::inference::CudaSharedMemoryStatusResponse>* streamer) {
                       return this->StreamedCudaSharedMemoryStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CudaSharedMemoryStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CudaSharedMemoryStatus(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryStatusRequest* /*request*/, ::inference::CudaSharedMemoryStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCudaSharedMemoryStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::CudaSharedMemoryStatusRequest,::inference::CudaSharedMemoryStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CudaSharedMemoryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CudaSharedMemoryRegister() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::CudaSharedMemoryRegisterRequest, ::inference::CudaSharedMemoryRegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::CudaSharedMemoryRegisterRequest, ::inference::CudaSharedMemoryRegisterResponse>* streamer) {
                       return this->StreamedCudaSharedMemoryRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CudaSharedMemoryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CudaSharedMemoryRegister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryRegisterRequest* /*request*/, ::inference::CudaSharedMemoryRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCudaSharedMemoryRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::CudaSharedMemoryRegisterRequest,::inference::CudaSharedMemoryRegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CudaSharedMemoryUnregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CudaSharedMemoryUnregister() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::CudaSharedMemoryUnregisterRequest, ::inference::CudaSharedMemoryUnregisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::CudaSharedMemoryUnregisterRequest, ::inference::CudaSharedMemoryUnregisterResponse>* streamer) {
                       return this->StreamedCudaSharedMemoryUnregister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CudaSharedMemoryUnregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CudaSharedMemoryUnregister(::grpc::ServerContext* /*context*/, const ::inference::CudaSharedMemoryUnregisterRequest* /*request*/, ::inference::CudaSharedMemoryUnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCudaSharedMemoryUnregister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::CudaSharedMemoryUnregisterRequest,::inference::CudaSharedMemoryUnregisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TraceSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TraceSetting() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::TraceSettingRequest, ::inference::TraceSettingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::TraceSettingRequest, ::inference::TraceSettingResponse>* streamer) {
                       return this->StreamedTraceSetting(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TraceSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TraceSetting(::grpc::ServerContext* /*context*/, const ::inference::TraceSettingRequest* /*request*/, ::inference::TraceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTraceSetting(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::TraceSettingRequest,::inference::TraceSettingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogSettings() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inference::LogSettingsRequest, ::inference::LogSettingsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inference::LogSettingsRequest, ::inference::LogSettingsResponse>* streamer) {
                       return this->StreamedLogSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogSettings(::grpc::ServerContext* /*context*/, const ::inference::LogSettingsRequest* /*request*/, ::inference::LogSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inference::LogSettingsRequest,::inference::LogSettingsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ServerLive<WithStreamedUnaryMethod_ServerReady<WithStreamedUnaryMethod_ModelReady<WithStreamedUnaryMethod_ServerMetadata<WithStreamedUnaryMethod_ModelMetadata<WithStreamedUnaryMethod_ModelInfer<WithStreamedUnaryMethod_ModelConfig<WithStreamedUnaryMethod_ModelStatistics<WithStreamedUnaryMethod_RepositoryIndex<WithStreamedUnaryMethod_RepositoryModelLoad<WithStreamedUnaryMethod_RepositoryModelUnload<WithStreamedUnaryMethod_SystemSharedMemoryStatus<WithStreamedUnaryMethod_SystemSharedMemoryRegister<WithStreamedUnaryMethod_SystemSharedMemoryUnregister<WithStreamedUnaryMethod_CudaSharedMemoryStatus<WithStreamedUnaryMethod_CudaSharedMemoryRegister<WithStreamedUnaryMethod_CudaSharedMemoryUnregister<WithStreamedUnaryMethod_TraceSetting<WithStreamedUnaryMethod_LogSettings<Service > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ServerLive<WithStreamedUnaryMethod_ServerReady<WithStreamedUnaryMethod_ModelReady<WithStreamedUnaryMethod_ServerMetadata<WithStreamedUnaryMethod_ModelMetadata<WithStreamedUnaryMethod_ModelInfer<WithStreamedUnaryMethod_ModelConfig<WithStreamedUnaryMethod_ModelStatistics<WithStreamedUnaryMethod_RepositoryIndex<WithStreamedUnaryMethod_RepositoryModelLoad<WithStreamedUnaryMethod_RepositoryModelUnload<WithStreamedUnaryMethod_SystemSharedMemoryStatus<WithStreamedUnaryMethod_SystemSharedMemoryRegister<WithStreamedUnaryMethod_SystemSharedMemoryUnregister<WithStreamedUnaryMethod_CudaSharedMemoryStatus<WithStreamedUnaryMethod_CudaSharedMemoryRegister<WithStreamedUnaryMethod_CudaSharedMemoryUnregister<WithStreamedUnaryMethod_TraceSetting<WithStreamedUnaryMethod_LogSettings<Service > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace inference


#endif  // GRPC_grpc_5fservice_2eproto__INCLUDED
