// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_service.proto

#include "grpc_service.pb.h"
#include "grpc_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace inference {

static const char* GRPCInferenceService_method_names[] = {
  "/inference.GRPCInferenceService/ServerLive",
  "/inference.GRPCInferenceService/ServerReady",
  "/inference.GRPCInferenceService/ModelReady",
  "/inference.GRPCInferenceService/ServerMetadata",
  "/inference.GRPCInferenceService/ModelMetadata",
  "/inference.GRPCInferenceService/ModelInfer",
  "/inference.GRPCInferenceService/ModelStreamInfer",
  "/inference.GRPCInferenceService/ModelConfig",
  "/inference.GRPCInferenceService/ModelStatistics",
  "/inference.GRPCInferenceService/RepositoryIndex",
  "/inference.GRPCInferenceService/RepositoryModelLoad",
  "/inference.GRPCInferenceService/RepositoryModelUnload",
  "/inference.GRPCInferenceService/SystemSharedMemoryStatus",
  "/inference.GRPCInferenceService/SystemSharedMemoryRegister",
  "/inference.GRPCInferenceService/SystemSharedMemoryUnregister",
  "/inference.GRPCInferenceService/CudaSharedMemoryStatus",
  "/inference.GRPCInferenceService/CudaSharedMemoryRegister",
  "/inference.GRPCInferenceService/CudaSharedMemoryUnregister",
  "/inference.GRPCInferenceService/TraceSetting",
  "/inference.GRPCInferenceService/LogSettings",
};

std::unique_ptr< GRPCInferenceService::Stub> GRPCInferenceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GRPCInferenceService::Stub> stub(new GRPCInferenceService::Stub(channel, options));
  return stub;
}

GRPCInferenceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ServerLive_(GRPCInferenceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerReady_(GRPCInferenceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModelReady_(GRPCInferenceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerMetadata_(GRPCInferenceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModelMetadata_(GRPCInferenceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModelInfer_(GRPCInferenceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModelStreamInfer_(GRPCInferenceService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ModelConfig_(GRPCInferenceService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModelStatistics_(GRPCInferenceService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RepositoryIndex_(GRPCInferenceService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RepositoryModelLoad_(GRPCInferenceService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RepositoryModelUnload_(GRPCInferenceService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SystemSharedMemoryStatus_(GRPCInferenceService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SystemSharedMemoryRegister_(GRPCInferenceService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SystemSharedMemoryUnregister_(GRPCInferenceService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CudaSharedMemoryStatus_(GRPCInferenceService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CudaSharedMemoryRegister_(GRPCInferenceService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CudaSharedMemoryUnregister_(GRPCInferenceService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TraceSetting_(GRPCInferenceService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LogSettings_(GRPCInferenceService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GRPCInferenceService::Stub::ServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::inference::ServerLiveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::ServerLiveRequest, ::inference::ServerLiveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ServerLive_, context, request, response);
}

void GRPCInferenceService::Stub::async::ServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest* request, ::inference::ServerLiveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::ServerLiveRequest, ::inference::ServerLiveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerLive_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::ServerLive(::grpc::ClientContext* context, const ::inference::ServerLiveRequest* request, ::inference::ServerLiveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerLive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::ServerLiveResponse>* GRPCInferenceService::Stub::PrepareAsyncServerLiveRaw(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::ServerLiveResponse, ::inference::ServerLiveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ServerLive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::ServerLiveResponse>* GRPCInferenceService::Stub::AsyncServerLiveRaw(::grpc::ClientContext* context, const ::inference::ServerLiveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncServerLiveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::ServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::inference::ServerReadyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::ServerReadyRequest, ::inference::ServerReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ServerReady_, context, request, response);
}

void GRPCInferenceService::Stub::async::ServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest* request, ::inference::ServerReadyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::ServerReadyRequest, ::inference::ServerReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerReady_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::ServerReady(::grpc::ClientContext* context, const ::inference::ServerReadyRequest* request, ::inference::ServerReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::ServerReadyResponse>* GRPCInferenceService::Stub::PrepareAsyncServerReadyRaw(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::ServerReadyResponse, ::inference::ServerReadyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ServerReady_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::ServerReadyResponse>* GRPCInferenceService::Stub::AsyncServerReadyRaw(::grpc::ClientContext* context, const ::inference::ServerReadyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncServerReadyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::ModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::inference::ModelReadyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::ModelReadyRequest, ::inference::ModelReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModelReady_, context, request, response);
}

void GRPCInferenceService::Stub::async::ModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest* request, ::inference::ModelReadyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::ModelReadyRequest, ::inference::ModelReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelReady_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::ModelReady(::grpc::ClientContext* context, const ::inference::ModelReadyRequest* request, ::inference::ModelReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelReadyResponse>* GRPCInferenceService::Stub::PrepareAsyncModelReadyRaw(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::ModelReadyResponse, ::inference::ModelReadyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModelReady_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelReadyResponse>* GRPCInferenceService::Stub::AsyncModelReadyRaw(::grpc::ClientContext* context, const ::inference::ModelReadyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModelReadyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::ServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::inference::ServerMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::ServerMetadataRequest, ::inference::ServerMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ServerMetadata_, context, request, response);
}

void GRPCInferenceService::Stub::async::ServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest* request, ::inference::ServerMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::ServerMetadataRequest, ::inference::ServerMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerMetadata_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::ServerMetadata(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest* request, ::inference::ServerMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::ServerMetadataResponse>* GRPCInferenceService::Stub::PrepareAsyncServerMetadataRaw(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::ServerMetadataResponse, ::inference::ServerMetadataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ServerMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::ServerMetadataResponse>* GRPCInferenceService::Stub::AsyncServerMetadataRaw(::grpc::ClientContext* context, const ::inference::ServerMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncServerMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::ModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::inference::ModelMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::ModelMetadataRequest, ::inference::ModelMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModelMetadata_, context, request, response);
}

void GRPCInferenceService::Stub::async::ModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest* request, ::inference::ModelMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::ModelMetadataRequest, ::inference::ModelMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelMetadata_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::ModelMetadata(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest* request, ::inference::ModelMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelMetadataResponse>* GRPCInferenceService::Stub::PrepareAsyncModelMetadataRaw(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::ModelMetadataResponse, ::inference::ModelMetadataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModelMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelMetadataResponse>* GRPCInferenceService::Stub::AsyncModelMetadataRaw(::grpc::ClientContext* context, const ::inference::ModelMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModelMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::ModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::inference::ModelInferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::ModelInferRequest, ::inference::ModelInferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModelInfer_, context, request, response);
}

void GRPCInferenceService::Stub::async::ModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest* request, ::inference::ModelInferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::ModelInferRequest, ::inference::ModelInferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelInfer_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::ModelInfer(::grpc::ClientContext* context, const ::inference::ModelInferRequest* request, ::inference::ModelInferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelInfer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelInferResponse>* GRPCInferenceService::Stub::PrepareAsyncModelInferRaw(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::ModelInferResponse, ::inference::ModelInferRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModelInfer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelInferResponse>* GRPCInferenceService::Stub::AsyncModelInferRaw(::grpc::ClientContext* context, const ::inference::ModelInferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModelInferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* GRPCInferenceService::Stub::ModelStreamInferRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>::Create(channel_.get(), rpcmethod_ModelStreamInfer_, context);
}

void GRPCInferenceService::Stub::async::ModelStreamInfer(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::inference::ModelInferRequest,::inference::ModelStreamInferResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::inference::ModelInferRequest,::inference::ModelStreamInferResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ModelStreamInfer_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* GRPCInferenceService::Stub::AsyncModelStreamInferRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>::Create(channel_.get(), cq, rpcmethod_ModelStreamInfer_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>* GRPCInferenceService::Stub::PrepareAsyncModelStreamInferRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>::Create(channel_.get(), cq, rpcmethod_ModelStreamInfer_, context, false, nullptr);
}

::grpc::Status GRPCInferenceService::Stub::ModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::inference::ModelConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::ModelConfigRequest, ::inference::ModelConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModelConfig_, context, request, response);
}

void GRPCInferenceService::Stub::async::ModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest* request, ::inference::ModelConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::ModelConfigRequest, ::inference::ModelConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelConfig_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::ModelConfig(::grpc::ClientContext* context, const ::inference::ModelConfigRequest* request, ::inference::ModelConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelConfigResponse>* GRPCInferenceService::Stub::PrepareAsyncModelConfigRaw(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::ModelConfigResponse, ::inference::ModelConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModelConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelConfigResponse>* GRPCInferenceService::Stub::AsyncModelConfigRaw(::grpc::ClientContext* context, const ::inference::ModelConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModelConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::ModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::inference::ModelStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::ModelStatisticsRequest, ::inference::ModelStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModelStatistics_, context, request, response);
}

void GRPCInferenceService::Stub::async::ModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest* request, ::inference::ModelStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::ModelStatisticsRequest, ::inference::ModelStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelStatistics_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::ModelStatistics(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest* request, ::inference::ModelStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModelStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelStatisticsResponse>* GRPCInferenceService::Stub::PrepareAsyncModelStatisticsRaw(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::ModelStatisticsResponse, ::inference::ModelStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModelStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::ModelStatisticsResponse>* GRPCInferenceService::Stub::AsyncModelStatisticsRaw(::grpc::ClientContext* context, const ::inference::ModelStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModelStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::RepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::inference::RepositoryIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::RepositoryIndexRequest, ::inference::RepositoryIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RepositoryIndex_, context, request, response);
}

void GRPCInferenceService::Stub::async::RepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest* request, ::inference::RepositoryIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::RepositoryIndexRequest, ::inference::RepositoryIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RepositoryIndex_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::RepositoryIndex(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest* request, ::inference::RepositoryIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RepositoryIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::RepositoryIndexResponse>* GRPCInferenceService::Stub::PrepareAsyncRepositoryIndexRaw(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::RepositoryIndexResponse, ::inference::RepositoryIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RepositoryIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::RepositoryIndexResponse>* GRPCInferenceService::Stub::AsyncRepositoryIndexRaw(::grpc::ClientContext* context, const ::inference::RepositoryIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRepositoryIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::RepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::inference::RepositoryModelLoadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::RepositoryModelLoadRequest, ::inference::RepositoryModelLoadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RepositoryModelLoad_, context, request, response);
}

void GRPCInferenceService::Stub::async::RepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest* request, ::inference::RepositoryModelLoadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::RepositoryModelLoadRequest, ::inference::RepositoryModelLoadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RepositoryModelLoad_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::RepositoryModelLoad(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest* request, ::inference::RepositoryModelLoadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RepositoryModelLoad_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelLoadResponse>* GRPCInferenceService::Stub::PrepareAsyncRepositoryModelLoadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::RepositoryModelLoadResponse, ::inference::RepositoryModelLoadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RepositoryModelLoad_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelLoadResponse>* GRPCInferenceService::Stub::AsyncRepositoryModelLoadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelLoadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRepositoryModelLoadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::RepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::inference::RepositoryModelUnloadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::RepositoryModelUnloadRequest, ::inference::RepositoryModelUnloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RepositoryModelUnload_, context, request, response);
}

void GRPCInferenceService::Stub::async::RepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest* request, ::inference::RepositoryModelUnloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::RepositoryModelUnloadRequest, ::inference::RepositoryModelUnloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RepositoryModelUnload_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::RepositoryModelUnload(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest* request, ::inference::RepositoryModelUnloadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RepositoryModelUnload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelUnloadResponse>* GRPCInferenceService::Stub::PrepareAsyncRepositoryModelUnloadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::RepositoryModelUnloadResponse, ::inference::RepositoryModelUnloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RepositoryModelUnload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::RepositoryModelUnloadResponse>* GRPCInferenceService::Stub::AsyncRepositoryModelUnloadRaw(::grpc::ClientContext* context, const ::inference::RepositoryModelUnloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRepositoryModelUnloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::SystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::inference::SystemSharedMemoryStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::SystemSharedMemoryStatusRequest, ::inference::SystemSharedMemoryStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SystemSharedMemoryStatus_, context, request, response);
}

void GRPCInferenceService::Stub::async::SystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest* request, ::inference::SystemSharedMemoryStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::SystemSharedMemoryStatusRequest, ::inference::SystemSharedMemoryStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemSharedMemoryStatus_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::SystemSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest* request, ::inference::SystemSharedMemoryStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemSharedMemoryStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryStatusResponse>* GRPCInferenceService::Stub::PrepareAsyncSystemSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::SystemSharedMemoryStatusResponse, ::inference::SystemSharedMemoryStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SystemSharedMemoryStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryStatusResponse>* GRPCInferenceService::Stub::AsyncSystemSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSystemSharedMemoryStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::SystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::inference::SystemSharedMemoryRegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::SystemSharedMemoryRegisterRequest, ::inference::SystemSharedMemoryRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SystemSharedMemoryRegister_, context, request, response);
}

void GRPCInferenceService::Stub::async::SystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest* request, ::inference::SystemSharedMemoryRegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::SystemSharedMemoryRegisterRequest, ::inference::SystemSharedMemoryRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemSharedMemoryRegister_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::SystemSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest* request, ::inference::SystemSharedMemoryRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemSharedMemoryRegister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryRegisterResponse>* GRPCInferenceService::Stub::PrepareAsyncSystemSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::SystemSharedMemoryRegisterResponse, ::inference::SystemSharedMemoryRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SystemSharedMemoryRegister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryRegisterResponse>* GRPCInferenceService::Stub::AsyncSystemSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSystemSharedMemoryRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::SystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::inference::SystemSharedMemoryUnregisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::SystemSharedMemoryUnregisterRequest, ::inference::SystemSharedMemoryUnregisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SystemSharedMemoryUnregister_, context, request, response);
}

void GRPCInferenceService::Stub::async::SystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest* request, ::inference::SystemSharedMemoryUnregisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::SystemSharedMemoryUnregisterRequest, ::inference::SystemSharedMemoryUnregisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemSharedMemoryUnregister_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::SystemSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest* request, ::inference::SystemSharedMemoryUnregisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemSharedMemoryUnregister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryUnregisterResponse>* GRPCInferenceService::Stub::PrepareAsyncSystemSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::SystemSharedMemoryUnregisterResponse, ::inference::SystemSharedMemoryUnregisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SystemSharedMemoryUnregister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::SystemSharedMemoryUnregisterResponse>* GRPCInferenceService::Stub::AsyncSystemSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::SystemSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSystemSharedMemoryUnregisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::CudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::inference::CudaSharedMemoryStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::CudaSharedMemoryStatusRequest, ::inference::CudaSharedMemoryStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CudaSharedMemoryStatus_, context, request, response);
}

void GRPCInferenceService::Stub::async::CudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest* request, ::inference::CudaSharedMemoryStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::CudaSharedMemoryStatusRequest, ::inference::CudaSharedMemoryStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CudaSharedMemoryStatus_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::CudaSharedMemoryStatus(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest* request, ::inference::CudaSharedMemoryStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CudaSharedMemoryStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryStatusResponse>* GRPCInferenceService::Stub::PrepareAsyncCudaSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::CudaSharedMemoryStatusResponse, ::inference::CudaSharedMemoryStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CudaSharedMemoryStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryStatusResponse>* GRPCInferenceService::Stub::AsyncCudaSharedMemoryStatusRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCudaSharedMemoryStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::CudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::inference::CudaSharedMemoryRegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::CudaSharedMemoryRegisterRequest, ::inference::CudaSharedMemoryRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CudaSharedMemoryRegister_, context, request, response);
}

void GRPCInferenceService::Stub::async::CudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest* request, ::inference::CudaSharedMemoryRegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::CudaSharedMemoryRegisterRequest, ::inference::CudaSharedMemoryRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CudaSharedMemoryRegister_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::CudaSharedMemoryRegister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest* request, ::inference::CudaSharedMemoryRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CudaSharedMemoryRegister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryRegisterResponse>* GRPCInferenceService::Stub::PrepareAsyncCudaSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::CudaSharedMemoryRegisterResponse, ::inference::CudaSharedMemoryRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CudaSharedMemoryRegister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryRegisterResponse>* GRPCInferenceService::Stub::AsyncCudaSharedMemoryRegisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCudaSharedMemoryRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::CudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::inference::CudaSharedMemoryUnregisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::CudaSharedMemoryUnregisterRequest, ::inference::CudaSharedMemoryUnregisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CudaSharedMemoryUnregister_, context, request, response);
}

void GRPCInferenceService::Stub::async::CudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest* request, ::inference::CudaSharedMemoryUnregisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::CudaSharedMemoryUnregisterRequest, ::inference::CudaSharedMemoryUnregisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CudaSharedMemoryUnregister_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::CudaSharedMemoryUnregister(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest* request, ::inference::CudaSharedMemoryUnregisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CudaSharedMemoryUnregister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryUnregisterResponse>* GRPCInferenceService::Stub::PrepareAsyncCudaSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::CudaSharedMemoryUnregisterResponse, ::inference::CudaSharedMemoryUnregisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CudaSharedMemoryUnregister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::CudaSharedMemoryUnregisterResponse>* GRPCInferenceService::Stub::AsyncCudaSharedMemoryUnregisterRaw(::grpc::ClientContext* context, const ::inference::CudaSharedMemoryUnregisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCudaSharedMemoryUnregisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::TraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::inference::TraceSettingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::TraceSettingRequest, ::inference::TraceSettingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TraceSetting_, context, request, response);
}

void GRPCInferenceService::Stub::async::TraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest* request, ::inference::TraceSettingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::TraceSettingRequest, ::inference::TraceSettingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraceSetting_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::TraceSetting(::grpc::ClientContext* context, const ::inference::TraceSettingRequest* request, ::inference::TraceSettingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraceSetting_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::TraceSettingResponse>* GRPCInferenceService::Stub::PrepareAsyncTraceSettingRaw(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::TraceSettingResponse, ::inference::TraceSettingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TraceSetting_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::TraceSettingResponse>* GRPCInferenceService::Stub::AsyncTraceSettingRaw(::grpc::ClientContext* context, const ::inference::TraceSettingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTraceSettingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCInferenceService::Stub::LogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::inference::LogSettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inference::LogSettingsRequest, ::inference::LogSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LogSettings_, context, request, response);
}

void GRPCInferenceService::Stub::async::LogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest* request, ::inference::LogSettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inference::LogSettingsRequest, ::inference::LogSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogSettings_, context, request, response, std::move(f));
}

void GRPCInferenceService::Stub::async::LogSettings(::grpc::ClientContext* context, const ::inference::LogSettingsRequest* request, ::inference::LogSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inference::LogSettingsResponse>* GRPCInferenceService::Stub::PrepareAsyncLogSettingsRaw(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inference::LogSettingsResponse, ::inference::LogSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LogSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inference::LogSettingsResponse>* GRPCInferenceService::Stub::AsyncLogSettingsRaw(::grpc::ClientContext* context, const ::inference::LogSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

GRPCInferenceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::ServerLiveRequest, ::inference::ServerLiveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::ServerLiveRequest* req,
             ::inference::ServerLiveResponse* resp) {
               return service->ServerLive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::ServerReadyRequest, ::inference::ServerReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::ServerReadyRequest* req,
             ::inference::ServerReadyResponse* resp) {
               return service->ServerReady(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::ModelReadyRequest, ::inference::ModelReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::ModelReadyRequest* req,
             ::inference::ModelReadyResponse* resp) {
               return service->ModelReady(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::ServerMetadataRequest, ::inference::ServerMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::ServerMetadataRequest* req,
             ::inference::ServerMetadataResponse* resp) {
               return service->ServerMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::ModelMetadataRequest, ::inference::ModelMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::ModelMetadataRequest* req,
             ::inference::ModelMetadataResponse* resp) {
               return service->ModelMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::ModelInferRequest, ::inference::ModelInferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::ModelInferRequest* req,
             ::inference::ModelInferResponse* resp) {
               return service->ModelInfer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[6],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< GRPCInferenceService::Service, ::inference::ModelInferRequest, ::inference::ModelStreamInferResponse>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::inference::ModelStreamInferResponse,
             ::inference::ModelInferRequest>* stream) {
               return service->ModelStreamInfer(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::ModelConfigRequest, ::inference::ModelConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::ModelConfigRequest* req,
             ::inference::ModelConfigResponse* resp) {
               return service->ModelConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::ModelStatisticsRequest, ::inference::ModelStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::ModelStatisticsRequest* req,
             ::inference::ModelStatisticsResponse* resp) {
               return service->ModelStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::RepositoryIndexRequest, ::inference::RepositoryIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::RepositoryIndexRequest* req,
             ::inference::RepositoryIndexResponse* resp) {
               return service->RepositoryIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::RepositoryModelLoadRequest, ::inference::RepositoryModelLoadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::RepositoryModelLoadRequest* req,
             ::inference::RepositoryModelLoadResponse* resp) {
               return service->RepositoryModelLoad(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::RepositoryModelUnloadRequest, ::inference::RepositoryModelUnloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::RepositoryModelUnloadRequest* req,
             ::inference::RepositoryModelUnloadResponse* resp) {
               return service->RepositoryModelUnload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::SystemSharedMemoryStatusRequest, ::inference::SystemSharedMemoryStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::SystemSharedMemoryStatusRequest* req,
             ::inference::SystemSharedMemoryStatusResponse* resp) {
               return service->SystemSharedMemoryStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::SystemSharedMemoryRegisterRequest, ::inference::SystemSharedMemoryRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::SystemSharedMemoryRegisterRequest* req,
             ::inference::SystemSharedMemoryRegisterResponse* resp) {
               return service->SystemSharedMemoryRegister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::SystemSharedMemoryUnregisterRequest, ::inference::SystemSharedMemoryUnregisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::SystemSharedMemoryUnregisterRequest* req,
             ::inference::SystemSharedMemoryUnregisterResponse* resp) {
               return service->SystemSharedMemoryUnregister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::CudaSharedMemoryStatusRequest, ::inference::CudaSharedMemoryStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::CudaSharedMemoryStatusRequest* req,
             ::inference::CudaSharedMemoryStatusResponse* resp) {
               return service->CudaSharedMemoryStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::CudaSharedMemoryRegisterRequest, ::inference::CudaSharedMemoryRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::CudaSharedMemoryRegisterRequest* req,
             ::inference::CudaSharedMemoryRegisterResponse* resp) {
               return service->CudaSharedMemoryRegister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::CudaSharedMemoryUnregisterRequest, ::inference::CudaSharedMemoryUnregisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::CudaSharedMemoryUnregisterRequest* req,
             ::inference::CudaSharedMemoryUnregisterResponse* resp) {
               return service->CudaSharedMemoryUnregister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::TraceSettingRequest, ::inference::TraceSettingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::TraceSettingRequest* req,
             ::inference::TraceSettingResponse* resp) {
               return service->TraceSetting(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCInferenceService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCInferenceService::Service, ::inference::LogSettingsRequest, ::inference::LogSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCInferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inference::LogSettingsRequest* req,
             ::inference::LogSettingsResponse* resp) {
               return service->LogSettings(ctx, req, resp);
             }, this)));
}

GRPCInferenceService::Service::~Service() {
}

::grpc::Status GRPCInferenceService::Service::ServerLive(::grpc::ServerContext* context, const ::inference::ServerLiveRequest* request, ::inference::ServerLiveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::ServerReady(::grpc::ServerContext* context, const ::inference::ServerReadyRequest* request, ::inference::ServerReadyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::ModelReady(::grpc::ServerContext* context, const ::inference::ModelReadyRequest* request, ::inference::ModelReadyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::ServerMetadata(::grpc::ServerContext* context, const ::inference::ServerMetadataRequest* request, ::inference::ServerMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::ModelMetadata(::grpc::ServerContext* context, const ::inference::ModelMetadataRequest* request, ::inference::ModelMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::ModelInfer(::grpc::ServerContext* context, const ::inference::ModelInferRequest* request, ::inference::ModelInferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::ModelStreamInfer(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::inference::ModelStreamInferResponse, ::inference::ModelInferRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::ModelConfig(::grpc::ServerContext* context, const ::inference::ModelConfigRequest* request, ::inference::ModelConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::ModelStatistics(::grpc::ServerContext* context, const ::inference::ModelStatisticsRequest* request, ::inference::ModelStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::RepositoryIndex(::grpc::ServerContext* context, const ::inference::RepositoryIndexRequest* request, ::inference::RepositoryIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::RepositoryModelLoad(::grpc::ServerContext* context, const ::inference::RepositoryModelLoadRequest* request, ::inference::RepositoryModelLoadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::RepositoryModelUnload(::grpc::ServerContext* context, const ::inference::RepositoryModelUnloadRequest* request, ::inference::RepositoryModelUnloadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::SystemSharedMemoryStatus(::grpc::ServerContext* context, const ::inference::SystemSharedMemoryStatusRequest* request, ::inference::SystemSharedMemoryStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::SystemSharedMemoryRegister(::grpc::ServerContext* context, const ::inference::SystemSharedMemoryRegisterRequest* request, ::inference::SystemSharedMemoryRegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::SystemSharedMemoryUnregister(::grpc::ServerContext* context, const ::inference::SystemSharedMemoryUnregisterRequest* request, ::inference::SystemSharedMemoryUnregisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::CudaSharedMemoryStatus(::grpc::ServerContext* context, const ::inference::CudaSharedMemoryStatusRequest* request, ::inference::CudaSharedMemoryStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::CudaSharedMemoryRegister(::grpc::ServerContext* context, const ::inference::CudaSharedMemoryRegisterRequest* request, ::inference::CudaSharedMemoryRegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::CudaSharedMemoryUnregister(::grpc::ServerContext* context, const ::inference::CudaSharedMemoryUnregisterRequest* request, ::inference::CudaSharedMemoryUnregisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::TraceSetting(::grpc::ServerContext* context, const ::inference::TraceSettingRequest* request, ::inference::TraceSettingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCInferenceService::Service::LogSettings(::grpc::ServerContext* context, const ::inference::LogSettingsRequest* request, ::inference::LogSettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace inference

